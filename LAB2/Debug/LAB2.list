
LAB2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ce4  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004ebc  08004ebc  00014ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004efc  08004efc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004efc  08004efc  00014efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f04  08004f04  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f04  08004f04  00014f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f08  08004f08  00014f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004f0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  2000000c  08004f18  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  08004f18  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011905  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022d4  00000000  00000000  00031984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e38  00000000  00000000  00033c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aeb  00000000  00000000  00034a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026671  00000000  00000000  0003557b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010c87  00000000  00000000  0005bbec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000feeaa  00000000  00000000  0006c873  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003d14  00000000  00000000  0016b720  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  0016f434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004ea4 	.word	0x08004ea4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08004ea4 	.word	0x08004ea4

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b970 	b.w	8000d4c <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9e08      	ldr	r6, [sp, #32]
 8000a8a:	460d      	mov	r5, r1
 8000a8c:	4604      	mov	r4, r0
 8000a8e:	460f      	mov	r7, r1
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d14a      	bne.n	8000b2a <__udivmoddi4+0xa6>
 8000a94:	428a      	cmp	r2, r1
 8000a96:	4694      	mov	ip, r2
 8000a98:	d965      	bls.n	8000b66 <__udivmoddi4+0xe2>
 8000a9a:	fab2 f382 	clz	r3, r2
 8000a9e:	b143      	cbz	r3, 8000ab2 <__udivmoddi4+0x2e>
 8000aa0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000aa4:	f1c3 0220 	rsb	r2, r3, #32
 8000aa8:	409f      	lsls	r7, r3
 8000aaa:	fa20 f202 	lsr.w	r2, r0, r2
 8000aae:	4317      	orrs	r7, r2
 8000ab0:	409c      	lsls	r4, r3
 8000ab2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ab6:	fa1f f58c 	uxth.w	r5, ip
 8000aba:	fbb7 f1fe 	udiv	r1, r7, lr
 8000abe:	0c22      	lsrs	r2, r4, #16
 8000ac0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ac4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ac8:	fb01 f005 	mul.w	r0, r1, r5
 8000acc:	4290      	cmp	r0, r2
 8000ace:	d90a      	bls.n	8000ae6 <__udivmoddi4+0x62>
 8000ad0:	eb1c 0202 	adds.w	r2, ip, r2
 8000ad4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ad8:	f080 811c 	bcs.w	8000d14 <__udivmoddi4+0x290>
 8000adc:	4290      	cmp	r0, r2
 8000ade:	f240 8119 	bls.w	8000d14 <__udivmoddi4+0x290>
 8000ae2:	3902      	subs	r1, #2
 8000ae4:	4462      	add	r2, ip
 8000ae6:	1a12      	subs	r2, r2, r0
 8000ae8:	b2a4      	uxth	r4, r4
 8000aea:	fbb2 f0fe 	udiv	r0, r2, lr
 8000aee:	fb0e 2210 	mls	r2, lr, r0, r2
 8000af2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000af6:	fb00 f505 	mul.w	r5, r0, r5
 8000afa:	42a5      	cmp	r5, r4
 8000afc:	d90a      	bls.n	8000b14 <__udivmoddi4+0x90>
 8000afe:	eb1c 0404 	adds.w	r4, ip, r4
 8000b02:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b06:	f080 8107 	bcs.w	8000d18 <__udivmoddi4+0x294>
 8000b0a:	42a5      	cmp	r5, r4
 8000b0c:	f240 8104 	bls.w	8000d18 <__udivmoddi4+0x294>
 8000b10:	4464      	add	r4, ip
 8000b12:	3802      	subs	r0, #2
 8000b14:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b18:	1b64      	subs	r4, r4, r5
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	b11e      	cbz	r6, 8000b26 <__udivmoddi4+0xa2>
 8000b1e:	40dc      	lsrs	r4, r3
 8000b20:	2300      	movs	r3, #0
 8000b22:	e9c6 4300 	strd	r4, r3, [r6]
 8000b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2a:	428b      	cmp	r3, r1
 8000b2c:	d908      	bls.n	8000b40 <__udivmoddi4+0xbc>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	f000 80ed 	beq.w	8000d0e <__udivmoddi4+0x28a>
 8000b34:	2100      	movs	r1, #0
 8000b36:	e9c6 0500 	strd	r0, r5, [r6]
 8000b3a:	4608      	mov	r0, r1
 8000b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b40:	fab3 f183 	clz	r1, r3
 8000b44:	2900      	cmp	r1, #0
 8000b46:	d149      	bne.n	8000bdc <__udivmoddi4+0x158>
 8000b48:	42ab      	cmp	r3, r5
 8000b4a:	d302      	bcc.n	8000b52 <__udivmoddi4+0xce>
 8000b4c:	4282      	cmp	r2, r0
 8000b4e:	f200 80f8 	bhi.w	8000d42 <__udivmoddi4+0x2be>
 8000b52:	1a84      	subs	r4, r0, r2
 8000b54:	eb65 0203 	sbc.w	r2, r5, r3
 8000b58:	2001      	movs	r0, #1
 8000b5a:	4617      	mov	r7, r2
 8000b5c:	2e00      	cmp	r6, #0
 8000b5e:	d0e2      	beq.n	8000b26 <__udivmoddi4+0xa2>
 8000b60:	e9c6 4700 	strd	r4, r7, [r6]
 8000b64:	e7df      	b.n	8000b26 <__udivmoddi4+0xa2>
 8000b66:	b902      	cbnz	r2, 8000b6a <__udivmoddi4+0xe6>
 8000b68:	deff      	udf	#255	; 0xff
 8000b6a:	fab2 f382 	clz	r3, r2
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	f040 8090 	bne.w	8000c94 <__udivmoddi4+0x210>
 8000b74:	1a8a      	subs	r2, r1, r2
 8000b76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b7a:	fa1f fe8c 	uxth.w	lr, ip
 8000b7e:	2101      	movs	r1, #1
 8000b80:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b84:	fb07 2015 	mls	r0, r7, r5, r2
 8000b88:	0c22      	lsrs	r2, r4, #16
 8000b8a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b8e:	fb0e f005 	mul.w	r0, lr, r5
 8000b92:	4290      	cmp	r0, r2
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0x124>
 8000b96:	eb1c 0202 	adds.w	r2, ip, r2
 8000b9a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x122>
 8000ba0:	4290      	cmp	r0, r2
 8000ba2:	f200 80cb 	bhi.w	8000d3c <__udivmoddi4+0x2b8>
 8000ba6:	4645      	mov	r5, r8
 8000ba8:	1a12      	subs	r2, r2, r0
 8000baa:	b2a4      	uxth	r4, r4
 8000bac:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bb0:	fb07 2210 	mls	r2, r7, r0, r2
 8000bb4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bb8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bbc:	45a6      	cmp	lr, r4
 8000bbe:	d908      	bls.n	8000bd2 <__udivmoddi4+0x14e>
 8000bc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bc8:	d202      	bcs.n	8000bd0 <__udivmoddi4+0x14c>
 8000bca:	45a6      	cmp	lr, r4
 8000bcc:	f200 80bb 	bhi.w	8000d46 <__udivmoddi4+0x2c2>
 8000bd0:	4610      	mov	r0, r2
 8000bd2:	eba4 040e 	sub.w	r4, r4, lr
 8000bd6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000bda:	e79f      	b.n	8000b1c <__udivmoddi4+0x98>
 8000bdc:	f1c1 0720 	rsb	r7, r1, #32
 8000be0:	408b      	lsls	r3, r1
 8000be2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000be6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bea:	fa05 f401 	lsl.w	r4, r5, r1
 8000bee:	fa20 f307 	lsr.w	r3, r0, r7
 8000bf2:	40fd      	lsrs	r5, r7
 8000bf4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bf8:	4323      	orrs	r3, r4
 8000bfa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bfe:	fa1f fe8c 	uxth.w	lr, ip
 8000c02:	fb09 5518 	mls	r5, r9, r8, r5
 8000c06:	0c1c      	lsrs	r4, r3, #16
 8000c08:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c0c:	fb08 f50e 	mul.w	r5, r8, lr
 8000c10:	42a5      	cmp	r5, r4
 8000c12:	fa02 f201 	lsl.w	r2, r2, r1
 8000c16:	fa00 f001 	lsl.w	r0, r0, r1
 8000c1a:	d90b      	bls.n	8000c34 <__udivmoddi4+0x1b0>
 8000c1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c20:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c24:	f080 8088 	bcs.w	8000d38 <__udivmoddi4+0x2b4>
 8000c28:	42a5      	cmp	r5, r4
 8000c2a:	f240 8085 	bls.w	8000d38 <__udivmoddi4+0x2b4>
 8000c2e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c32:	4464      	add	r4, ip
 8000c34:	1b64      	subs	r4, r4, r5
 8000c36:	b29d      	uxth	r5, r3
 8000c38:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c3c:	fb09 4413 	mls	r4, r9, r3, r4
 8000c40:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c44:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c48:	45a6      	cmp	lr, r4
 8000c4a:	d908      	bls.n	8000c5e <__udivmoddi4+0x1da>
 8000c4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c50:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c54:	d26c      	bcs.n	8000d30 <__udivmoddi4+0x2ac>
 8000c56:	45a6      	cmp	lr, r4
 8000c58:	d96a      	bls.n	8000d30 <__udivmoddi4+0x2ac>
 8000c5a:	3b02      	subs	r3, #2
 8000c5c:	4464      	add	r4, ip
 8000c5e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c62:	fba3 9502 	umull	r9, r5, r3, r2
 8000c66:	eba4 040e 	sub.w	r4, r4, lr
 8000c6a:	42ac      	cmp	r4, r5
 8000c6c:	46c8      	mov	r8, r9
 8000c6e:	46ae      	mov	lr, r5
 8000c70:	d356      	bcc.n	8000d20 <__udivmoddi4+0x29c>
 8000c72:	d053      	beq.n	8000d1c <__udivmoddi4+0x298>
 8000c74:	b156      	cbz	r6, 8000c8c <__udivmoddi4+0x208>
 8000c76:	ebb0 0208 	subs.w	r2, r0, r8
 8000c7a:	eb64 040e 	sbc.w	r4, r4, lr
 8000c7e:	fa04 f707 	lsl.w	r7, r4, r7
 8000c82:	40ca      	lsrs	r2, r1
 8000c84:	40cc      	lsrs	r4, r1
 8000c86:	4317      	orrs	r7, r2
 8000c88:	e9c6 7400 	strd	r7, r4, [r6]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	2100      	movs	r1, #0
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	f1c3 0120 	rsb	r1, r3, #32
 8000c98:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c9c:	fa20 f201 	lsr.w	r2, r0, r1
 8000ca0:	fa25 f101 	lsr.w	r1, r5, r1
 8000ca4:	409d      	lsls	r5, r3
 8000ca6:	432a      	orrs	r2, r5
 8000ca8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cac:	fa1f fe8c 	uxth.w	lr, ip
 8000cb0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cb4:	fb07 1510 	mls	r5, r7, r0, r1
 8000cb8:	0c11      	lsrs	r1, r2, #16
 8000cba:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cbe:	fb00 f50e 	mul.w	r5, r0, lr
 8000cc2:	428d      	cmp	r5, r1
 8000cc4:	fa04 f403 	lsl.w	r4, r4, r3
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x258>
 8000cca:	eb1c 0101 	adds.w	r1, ip, r1
 8000cce:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cd2:	d22f      	bcs.n	8000d34 <__udivmoddi4+0x2b0>
 8000cd4:	428d      	cmp	r5, r1
 8000cd6:	d92d      	bls.n	8000d34 <__udivmoddi4+0x2b0>
 8000cd8:	3802      	subs	r0, #2
 8000cda:	4461      	add	r1, ip
 8000cdc:	1b49      	subs	r1, r1, r5
 8000cde:	b292      	uxth	r2, r2
 8000ce0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ce4:	fb07 1115 	mls	r1, r7, r5, r1
 8000ce8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cec:	fb05 f10e 	mul.w	r1, r5, lr
 8000cf0:	4291      	cmp	r1, r2
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x282>
 8000cf4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cfc:	d216      	bcs.n	8000d2c <__udivmoddi4+0x2a8>
 8000cfe:	4291      	cmp	r1, r2
 8000d00:	d914      	bls.n	8000d2c <__udivmoddi4+0x2a8>
 8000d02:	3d02      	subs	r5, #2
 8000d04:	4462      	add	r2, ip
 8000d06:	1a52      	subs	r2, r2, r1
 8000d08:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d0c:	e738      	b.n	8000b80 <__udivmoddi4+0xfc>
 8000d0e:	4631      	mov	r1, r6
 8000d10:	4630      	mov	r0, r6
 8000d12:	e708      	b.n	8000b26 <__udivmoddi4+0xa2>
 8000d14:	4639      	mov	r1, r7
 8000d16:	e6e6      	b.n	8000ae6 <__udivmoddi4+0x62>
 8000d18:	4610      	mov	r0, r2
 8000d1a:	e6fb      	b.n	8000b14 <__udivmoddi4+0x90>
 8000d1c:	4548      	cmp	r0, r9
 8000d1e:	d2a9      	bcs.n	8000c74 <__udivmoddi4+0x1f0>
 8000d20:	ebb9 0802 	subs.w	r8, r9, r2
 8000d24:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d28:	3b01      	subs	r3, #1
 8000d2a:	e7a3      	b.n	8000c74 <__udivmoddi4+0x1f0>
 8000d2c:	4645      	mov	r5, r8
 8000d2e:	e7ea      	b.n	8000d06 <__udivmoddi4+0x282>
 8000d30:	462b      	mov	r3, r5
 8000d32:	e794      	b.n	8000c5e <__udivmoddi4+0x1da>
 8000d34:	4640      	mov	r0, r8
 8000d36:	e7d1      	b.n	8000cdc <__udivmoddi4+0x258>
 8000d38:	46d0      	mov	r8, sl
 8000d3a:	e77b      	b.n	8000c34 <__udivmoddi4+0x1b0>
 8000d3c:	3d02      	subs	r5, #2
 8000d3e:	4462      	add	r2, ip
 8000d40:	e732      	b.n	8000ba8 <__udivmoddi4+0x124>
 8000d42:	4608      	mov	r0, r1
 8000d44:	e70a      	b.n	8000b5c <__udivmoddi4+0xd8>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	e742      	b.n	8000bd2 <__udivmoddi4+0x14e>

08000d4c <__aeabi_idiv0>:
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop

08000d50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d54:	f000 fb91 	bl	800147a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d58:	f000 f818 	bl	8000d8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d5c:	f000 f95e 	bl	800101c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000d60:	f000 f912 	bl	8000f88 <MX_LPUART1_UART_Init>
  MX_DAC1_Init();
 8000d64:	f000 f8d6 	bl	8000f14 <MX_DAC1_Init>
  MX_ADC1_Init();
 8000d68:	f000 f85c 	bl	8000e24 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
 8000d6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d70:	2200      	movs	r2, #0
 8000d72:	2100      	movs	r1, #0
 8000d74:	4804      	ldr	r0, [pc, #16]	; (8000d88 <main+0x38>)
 8000d76:	f001 fea1 	bl	8002abc <HAL_DAC_SetValue>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4802      	ldr	r0, [pc, #8]	; (8000d88 <main+0x38>)
 8000d7e:	f001 fe4a 	bl	8002a16 <HAL_DAC_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  DAC_Update();
 8000d82:	f000 f9b9 	bl	80010f8 <DAC_Update>
 8000d86:	e7fc      	b.n	8000d82 <main+0x32>
 8000d88:	20000094 	.word	0x20000094

08000d8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b094      	sub	sp, #80	; 0x50
 8000d90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d92:	f107 0318 	add.w	r3, r7, #24
 8000d96:	2238      	movs	r2, #56	; 0x38
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f004 f856 	bl	8004e4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da0:	1d3b      	adds	r3, r7, #4
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]
 8000daa:	60da      	str	r2, [r3, #12]
 8000dac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000dae:	2000      	movs	r0, #0
 8000db0:	f002 fa12 	bl	80031d8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000db4:	2302      	movs	r3, #2
 8000db6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000db8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dbc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dbe:	2340      	movs	r3, #64	; 0x40
 8000dc0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000dca:	2304      	movs	r3, #4
 8000dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000dce:	2355      	movs	r3, #85	; 0x55
 8000dd0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dde:	f107 0318 	add.w	r3, r7, #24
 8000de2:	4618      	mov	r0, r3
 8000de4:	f002 faac 	bl	8003340 <HAL_RCC_OscConfig>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000dee:	f000 f9c3 	bl	8001178 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000df2:	230f      	movs	r3, #15
 8000df4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000df6:	2303      	movs	r3, #3
 8000df8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e06:	1d3b      	adds	r3, r7, #4
 8000e08:	2104      	movs	r1, #4
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f002 fdb0 	bl	8003970 <HAL_RCC_ClockConfig>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000e16:	f000 f9af 	bl	8001178 <Error_Handler>
  }
}
 8000e1a:	bf00      	nop
 8000e1c:	3750      	adds	r7, #80	; 0x50
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
	...

08000e24 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08c      	sub	sp, #48	; 0x30
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	2220      	movs	r2, #32
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f004 f805 	bl	8004e4c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e42:	4b32      	ldr	r3, [pc, #200]	; (8000f0c <MX_ADC1_Init+0xe8>)
 8000e44:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e48:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e4a:	4b30      	ldr	r3, [pc, #192]	; (8000f0c <MX_ADC1_Init+0xe8>)
 8000e4c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e50:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000e52:	4b2e      	ldr	r3, [pc, #184]	; (8000f0c <MX_ADC1_Init+0xe8>)
 8000e54:	2208      	movs	r2, #8
 8000e56:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e58:	4b2c      	ldr	r3, [pc, #176]	; (8000f0c <MX_ADC1_Init+0xe8>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000e5e:	4b2b      	ldr	r3, [pc, #172]	; (8000f0c <MX_ADC1_Init+0xe8>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e64:	4b29      	ldr	r3, [pc, #164]	; (8000f0c <MX_ADC1_Init+0xe8>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e6a:	4b28      	ldr	r3, [pc, #160]	; (8000f0c <MX_ADC1_Init+0xe8>)
 8000e6c:	2204      	movs	r2, #4
 8000e6e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e70:	4b26      	ldr	r3, [pc, #152]	; (8000f0c <MX_ADC1_Init+0xe8>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e76:	4b25      	ldr	r3, [pc, #148]	; (8000f0c <MX_ADC1_Init+0xe8>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000e7c:	4b23      	ldr	r3, [pc, #140]	; (8000f0c <MX_ADC1_Init+0xe8>)
 8000e7e:	2201      	movs	r2, #1
 8000e80:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e82:	4b22      	ldr	r3, [pc, #136]	; (8000f0c <MX_ADC1_Init+0xe8>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e8a:	4b20      	ldr	r3, [pc, #128]	; (8000f0c <MX_ADC1_Init+0xe8>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e90:	4b1e      	ldr	r3, [pc, #120]	; (8000f0c <MX_ADC1_Init+0xe8>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e96:	4b1d      	ldr	r3, [pc, #116]	; (8000f0c <MX_ADC1_Init+0xe8>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e9e:	4b1b      	ldr	r3, [pc, #108]	; (8000f0c <MX_ADC1_Init+0xe8>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000ea4:	4b19      	ldr	r3, [pc, #100]	; (8000f0c <MX_ADC1_Init+0xe8>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000eac:	4817      	ldr	r0, [pc, #92]	; (8000f0c <MX_ADC1_Init+0xe8>)
 8000eae:	f000 fd51 	bl	8001954 <HAL_ADC_Init>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000eb8:	f000 f95e 	bl	8001178 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ec0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4811      	ldr	r0, [pc, #68]	; (8000f0c <MX_ADC1_Init+0xe8>)
 8000ec8:	f001 fb6c 	bl	80025a4 <HAL_ADCEx_MultiModeConfigChannel>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000ed2:	f000 f951 	bl	8001178 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <MX_ADC1_Init+0xec>)
 8000ed8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000eda:	2306      	movs	r3, #6
 8000edc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ee2:	237f      	movs	r3, #127	; 0x7f
 8000ee4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ee6:	2304      	movs	r3, #4
 8000ee8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eee:	1d3b      	adds	r3, r7, #4
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4806      	ldr	r0, [pc, #24]	; (8000f0c <MX_ADC1_Init+0xe8>)
 8000ef4:	f000 fef0 	bl	8001cd8 <HAL_ADC_ConfigChannel>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000efe:	f000 f93b 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f02:	bf00      	nop
 8000f04:	3730      	adds	r7, #48	; 0x30
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000028 	.word	0x20000028
 8000f10:	04300002 	.word	0x04300002

08000f14 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08c      	sub	sp, #48	; 0x30
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000f1a:	463b      	mov	r3, r7
 8000f1c:	2230      	movs	r2, #48	; 0x30
 8000f1e:	2100      	movs	r1, #0
 8000f20:	4618      	mov	r0, r3
 8000f22:	f003 ff93 	bl	8004e4c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000f26:	4b16      	ldr	r3, [pc, #88]	; (8000f80 <MX_DAC1_Init+0x6c>)
 8000f28:	4a16      	ldr	r2, [pc, #88]	; (8000f84 <MX_DAC1_Init+0x70>)
 8000f2a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000f2c:	4814      	ldr	r0, [pc, #80]	; (8000f80 <MX_DAC1_Init+0x6c>)
 8000f2e:	f001 fd50 	bl	80029d2 <HAL_DAC_Init>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000f38:	f000 f91e 	bl	8001178 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000f40:	2300      	movs	r3, #0
 8000f42:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000f44:	2300      	movs	r3, #0
 8000f46:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000f50:	2300      	movs	r3, #0
 8000f52:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000f60:	463b      	mov	r3, r7
 8000f62:	2200      	movs	r2, #0
 8000f64:	4619      	mov	r1, r3
 8000f66:	4806      	ldr	r0, [pc, #24]	; (8000f80 <MX_DAC1_Init+0x6c>)
 8000f68:	f001 fdd0 	bl	8002b0c <HAL_DAC_ConfigChannel>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000f72:	f000 f901 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000f76:	bf00      	nop
 8000f78:	3730      	adds	r7, #48	; 0x30
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000094 	.word	0x20000094
 8000f84:	50000800 	.word	0x50000800

08000f88 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000f8c:	4b21      	ldr	r3, [pc, #132]	; (8001014 <MX_LPUART1_UART_Init+0x8c>)
 8000f8e:	4a22      	ldr	r2, [pc, #136]	; (8001018 <MX_LPUART1_UART_Init+0x90>)
 8000f90:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000f92:	4b20      	ldr	r3, [pc, #128]	; (8001014 <MX_LPUART1_UART_Init+0x8c>)
 8000f94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f98:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f9a:	4b1e      	ldr	r3, [pc, #120]	; (8001014 <MX_LPUART1_UART_Init+0x8c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000fa0:	4b1c      	ldr	r3, [pc, #112]	; (8001014 <MX_LPUART1_UART_Init+0x8c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000fa6:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <MX_LPUART1_UART_Init+0x8c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000fac:	4b19      	ldr	r3, [pc, #100]	; (8001014 <MX_LPUART1_UART_Init+0x8c>)
 8000fae:	220c      	movs	r2, #12
 8000fb0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fb2:	4b18      	ldr	r3, [pc, #96]	; (8001014 <MX_LPUART1_UART_Init+0x8c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fb8:	4b16      	ldr	r3, [pc, #88]	; (8001014 <MX_LPUART1_UART_Init+0x8c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fbe:	4b15      	ldr	r3, [pc, #84]	; (8001014 <MX_LPUART1_UART_Init+0x8c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fc4:	4b13      	ldr	r3, [pc, #76]	; (8001014 <MX_LPUART1_UART_Init+0x8c>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000fca:	4812      	ldr	r0, [pc, #72]	; (8001014 <MX_LPUART1_UART_Init+0x8c>)
 8000fcc:	f003 f93a 	bl	8004244 <HAL_UART_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000fd6:	f000 f8cf 	bl	8001178 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fda:	2100      	movs	r1, #0
 8000fdc:	480d      	ldr	r0, [pc, #52]	; (8001014 <MX_LPUART1_UART_Init+0x8c>)
 8000fde:	f003 fe6b 	bl	8004cb8 <HAL_UARTEx_SetTxFifoThreshold>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000fe8:	f000 f8c6 	bl	8001178 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fec:	2100      	movs	r1, #0
 8000fee:	4809      	ldr	r0, [pc, #36]	; (8001014 <MX_LPUART1_UART_Init+0x8c>)
 8000ff0:	f003 fea0 	bl	8004d34 <HAL_UARTEx_SetRxFifoThreshold>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000ffa:	f000 f8bd 	bl	8001178 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000ffe:	4805      	ldr	r0, [pc, #20]	; (8001014 <MX_LPUART1_UART_Init+0x8c>)
 8001000:	f003 fe21 	bl	8004c46 <HAL_UARTEx_DisableFifoMode>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800100a:	f000 f8b5 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	200000a8 	.word	0x200000a8
 8001018:	40008000 	.word	0x40008000

0800101c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08a      	sub	sp, #40	; 0x28
 8001020:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001022:	f107 0314 	add.w	r3, r7, #20
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]
 800102e:	60da      	str	r2, [r3, #12]
 8001030:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001032:	4b2f      	ldr	r3, [pc, #188]	; (80010f0 <MX_GPIO_Init+0xd4>)
 8001034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001036:	4a2e      	ldr	r2, [pc, #184]	; (80010f0 <MX_GPIO_Init+0xd4>)
 8001038:	f043 0304 	orr.w	r3, r3, #4
 800103c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800103e:	4b2c      	ldr	r3, [pc, #176]	; (80010f0 <MX_GPIO_Init+0xd4>)
 8001040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001042:	f003 0304 	and.w	r3, r3, #4
 8001046:	613b      	str	r3, [r7, #16]
 8001048:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800104a:	4b29      	ldr	r3, [pc, #164]	; (80010f0 <MX_GPIO_Init+0xd4>)
 800104c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104e:	4a28      	ldr	r2, [pc, #160]	; (80010f0 <MX_GPIO_Init+0xd4>)
 8001050:	f043 0320 	orr.w	r3, r3, #32
 8001054:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001056:	4b26      	ldr	r3, [pc, #152]	; (80010f0 <MX_GPIO_Init+0xd4>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105a:	f003 0320 	and.w	r3, r3, #32
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001062:	4b23      	ldr	r3, [pc, #140]	; (80010f0 <MX_GPIO_Init+0xd4>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001066:	4a22      	ldr	r2, [pc, #136]	; (80010f0 <MX_GPIO_Init+0xd4>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800106e:	4b20      	ldr	r3, [pc, #128]	; (80010f0 <MX_GPIO_Init+0xd4>)
 8001070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	60bb      	str	r3, [r7, #8]
 8001078:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800107a:	4b1d      	ldr	r3, [pc, #116]	; (80010f0 <MX_GPIO_Init+0xd4>)
 800107c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107e:	4a1c      	ldr	r2, [pc, #112]	; (80010f0 <MX_GPIO_Init+0xd4>)
 8001080:	f043 0302 	orr.w	r3, r3, #2
 8001084:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001086:	4b1a      	ldr	r3, [pc, #104]	; (80010f0 <MX_GPIO_Init+0xd4>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	607b      	str	r3, [r7, #4]
 8001090:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001092:	2200      	movs	r2, #0
 8001094:	2120      	movs	r1, #32
 8001096:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800109a:	f002 f861 	bl	8003160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800109e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010a4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	4619      	mov	r1, r3
 80010b4:	480f      	ldr	r0, [pc, #60]	; (80010f4 <MX_GPIO_Init+0xd8>)
 80010b6:	f001 fed1 	bl	8002e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80010ba:	2320      	movs	r3, #32
 80010bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010be:	2301      	movs	r3, #1
 80010c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c6:	2300      	movs	r3, #0
 80010c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010ca:	f107 0314 	add.w	r3, r7, #20
 80010ce:	4619      	mov	r1, r3
 80010d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d4:	f001 fec2 	bl	8002e5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010d8:	2200      	movs	r2, #0
 80010da:	2100      	movs	r1, #0
 80010dc:	2028      	movs	r0, #40	; 0x28
 80010de:	f001 fc44 	bl	800296a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010e2:	2028      	movs	r0, #40	; 0x28
 80010e4:	f001 fc5b 	bl	800299e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010e8:	bf00      	nop
 80010ea:	3728      	adds	r7, #40	; 0x28
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40021000 	.word	0x40021000
 80010f4:	48000800 	.word	0x48000800

080010f8 <DAC_Update>:

/* USER CODE BEGIN 4 */
void DAC_Update()
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
static timeStamp =0;
if(HAL_GetTick()>timeStamp)
 80010fc:	f000 fa22 	bl	8001544 <HAL_GetTick>
 8001100:	4603      	mov	r3, r0
 8001102:	4a19      	ldr	r2, [pc, #100]	; (8001168 <DAC_Update+0x70>)
 8001104:	6812      	ldr	r2, [r2, #0]
 8001106:	4293      	cmp	r3, r2
 8001108:	d926      	bls.n	8001158 <DAC_Update+0x60>
{
timeStamp = HAL_GetTick()+500;
 800110a:	f000 fa1b 	bl	8001544 <HAL_GetTick>
 800110e:	4603      	mov	r3, r0
 8001110:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001114:	461a      	mov	r2, r3
 8001116:	4b14      	ldr	r3, [pc, #80]	; (8001168 <DAC_Update+0x70>)
 8001118:	601a      	str	r2, [r3, #0]

DAC_Output = Jimo/0.00080566;
 800111a:	4b14      	ldr	r3, [pc, #80]	; (800116c <DAC_Update+0x74>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff f9de 	bl	80004e0 <__aeabi_f2d>
 8001124:	a30e      	add	r3, pc, #56	; (adr r3, 8001160 <DAC_Update+0x68>)
 8001126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112a:	f7ff fb5b 	bl	80007e4 <__aeabi_ddiv>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	4610      	mov	r0, r2
 8001134:	4619      	mov	r1, r3
 8001136:	f7ff fc3d 	bl	80009b4 <__aeabi_d2f>
 800113a:	4603      	mov	r3, r0
 800113c:	4a0c      	ldr	r2, [pc, #48]	; (8001170 <DAC_Update+0x78>)
 800113e:	6013      	str	r3, [r2, #0]
HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_Output);
 8001140:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <DAC_Update+0x78>)
 8001142:	edd3 7a00 	vldr	s15, [r3]
 8001146:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800114a:	ee17 3a90 	vmov	r3, s15
 800114e:	2200      	movs	r2, #0
 8001150:	2100      	movs	r1, #0
 8001152:	4808      	ldr	r0, [pc, #32]	; (8001174 <DAC_Update+0x7c>)
 8001154:	f001 fcb2 	bl	8002abc <HAL_DAC_SetValue>

}
}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}
 800115c:	f3af 8000 	nop.w
 8001160:	ad045a83 	.word	0xad045a83
 8001164:	3f4a665d 	.word	0x3f4a665d
 8001168:	20000140 	.word	0x20000140
 800116c:	2000013c 	.word	0x2000013c
 8001170:	20000138 	.word	0x20000138
 8001174:	20000094 	.word	0x20000094

08001178 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800117c:	b672      	cpsid	i
}
 800117e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001180:	e7fe      	b.n	8001180 <Error_Handler+0x8>
	...

08001184 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118a:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <HAL_MspInit+0x44>)
 800118c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800118e:	4a0e      	ldr	r2, [pc, #56]	; (80011c8 <HAL_MspInit+0x44>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	6613      	str	r3, [r2, #96]	; 0x60
 8001196:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <HAL_MspInit+0x44>)
 8001198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	607b      	str	r3, [r7, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a2:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <HAL_MspInit+0x44>)
 80011a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a6:	4a08      	ldr	r2, [pc, #32]	; (80011c8 <HAL_MspInit+0x44>)
 80011a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ac:	6593      	str	r3, [r2, #88]	; 0x58
 80011ae:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <HAL_MspInit+0x44>)
 80011b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b6:	603b      	str	r3, [r7, #0]
 80011b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80011ba:	f002 f8b1 	bl	8003320 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40021000 	.word	0x40021000

080011cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b09e      	sub	sp, #120	; 0x78
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011e4:	f107 0310 	add.w	r3, r7, #16
 80011e8:	2254      	movs	r2, #84	; 0x54
 80011ea:	2100      	movs	r1, #0
 80011ec:	4618      	mov	r0, r3
 80011ee:	f003 fe2d 	bl	8004e4c <memset>
  if(hadc->Instance==ADC1)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011fa:	d134      	bne.n	8001266 <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80011fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001200:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001202:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001206:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001208:	f107 0310 	add.w	r3, r7, #16
 800120c:	4618      	mov	r0, r3
 800120e:	f002 fdcb 	bl	8003da8 <HAL_RCCEx_PeriphCLKConfig>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001218:	f7ff ffae 	bl	8001178 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800121c:	4b14      	ldr	r3, [pc, #80]	; (8001270 <HAL_ADC_MspInit+0xa4>)
 800121e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001220:	4a13      	ldr	r2, [pc, #76]	; (8001270 <HAL_ADC_MspInit+0xa4>)
 8001222:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001226:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001228:	4b11      	ldr	r3, [pc, #68]	; (8001270 <HAL_ADC_MspInit+0xa4>)
 800122a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001234:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <HAL_ADC_MspInit+0xa4>)
 8001236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001238:	4a0d      	ldr	r2, [pc, #52]	; (8001270 <HAL_ADC_MspInit+0xa4>)
 800123a:	f043 0301 	orr.w	r3, r3, #1
 800123e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001240:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <HAL_ADC_MspInit+0xa4>)
 8001242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001244:	f003 0301 	and.w	r3, r3, #1
 8001248:	60bb      	str	r3, [r7, #8]
 800124a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800124c:	2301      	movs	r3, #1
 800124e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001250:	2303      	movs	r3, #3
 8001252:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001258:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800125c:	4619      	mov	r1, r3
 800125e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001262:	f001 fdfb 	bl	8002e5c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001266:	bf00      	nop
 8001268:	3778      	adds	r7, #120	; 0x78
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40021000 	.word	0x40021000

08001274 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08a      	sub	sp, #40	; 0x28
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a15      	ldr	r2, [pc, #84]	; (80012e8 <HAL_DAC_MspInit+0x74>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d124      	bne.n	80012e0 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001296:	4b15      	ldr	r3, [pc, #84]	; (80012ec <HAL_DAC_MspInit+0x78>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129a:	4a14      	ldr	r2, [pc, #80]	; (80012ec <HAL_DAC_MspInit+0x78>)
 800129c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012a2:	4b12      	ldr	r3, [pc, #72]	; (80012ec <HAL_DAC_MspInit+0x78>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012aa:	613b      	str	r3, [r7, #16]
 80012ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ae:	4b0f      	ldr	r3, [pc, #60]	; (80012ec <HAL_DAC_MspInit+0x78>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b2:	4a0e      	ldr	r2, [pc, #56]	; (80012ec <HAL_DAC_MspInit+0x78>)
 80012b4:	f043 0301 	orr.w	r3, r3, #1
 80012b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ba:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <HAL_DAC_MspInit+0x78>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012c6:	2310      	movs	r3, #16
 80012c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ca:	2303      	movs	r3, #3
 80012cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	4619      	mov	r1, r3
 80012d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012dc:	f001 fdbe 	bl	8002e5c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80012e0:	bf00      	nop
 80012e2:	3728      	adds	r7, #40	; 0x28
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	50000800 	.word	0x50000800
 80012ec:	40021000 	.word	0x40021000

080012f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b09e      	sub	sp, #120	; 0x78
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001308:	f107 0310 	add.w	r3, r7, #16
 800130c:	2254      	movs	r2, #84	; 0x54
 800130e:	2100      	movs	r1, #0
 8001310:	4618      	mov	r0, r3
 8001312:	f003 fd9b 	bl	8004e4c <memset>
  if(huart->Instance==LPUART1)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a1f      	ldr	r2, [pc, #124]	; (8001398 <HAL_UART_MspInit+0xa8>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d136      	bne.n	800138e <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001320:	2320      	movs	r3, #32
 8001322:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001324:	2300      	movs	r3, #0
 8001326:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001328:	f107 0310 	add.w	r3, r7, #16
 800132c:	4618      	mov	r0, r3
 800132e:	f002 fd3b 	bl	8003da8 <HAL_RCCEx_PeriphCLKConfig>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001338:	f7ff ff1e 	bl	8001178 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800133c:	4b17      	ldr	r3, [pc, #92]	; (800139c <HAL_UART_MspInit+0xac>)
 800133e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001340:	4a16      	ldr	r2, [pc, #88]	; (800139c <HAL_UART_MspInit+0xac>)
 8001342:	f043 0301 	orr.w	r3, r3, #1
 8001346:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001348:	4b14      	ldr	r3, [pc, #80]	; (800139c <HAL_UART_MspInit+0xac>)
 800134a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800134c:	f003 0301 	and.w	r3, r3, #1
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001354:	4b11      	ldr	r3, [pc, #68]	; (800139c <HAL_UART_MspInit+0xac>)
 8001356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001358:	4a10      	ldr	r2, [pc, #64]	; (800139c <HAL_UART_MspInit+0xac>)
 800135a:	f043 0301 	orr.w	r3, r3, #1
 800135e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001360:	4b0e      	ldr	r3, [pc, #56]	; (800139c <HAL_UART_MspInit+0xac>)
 8001362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	60bb      	str	r3, [r7, #8]
 800136a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800136c:	230c      	movs	r3, #12
 800136e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001370:	2302      	movs	r3, #2
 8001372:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2300      	movs	r3, #0
 800137a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800137c:	230c      	movs	r3, #12
 800137e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001380:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001384:	4619      	mov	r1, r3
 8001386:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800138a:	f001 fd67 	bl	8002e5c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800138e:	bf00      	nop
 8001390:	3778      	adds	r7, #120	; 0x78
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40008000 	.word	0x40008000
 800139c:	40021000 	.word	0x40021000

080013a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013a4:	e7fe      	b.n	80013a4 <NMI_Handler+0x4>

080013a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013a6:	b480      	push	{r7}
 80013a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013aa:	e7fe      	b.n	80013aa <HardFault_Handler+0x4>

080013ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b0:	e7fe      	b.n	80013b0 <MemManage_Handler+0x4>

080013b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013b2:	b480      	push	{r7}
 80013b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013b6:	e7fe      	b.n	80013b6 <BusFault_Handler+0x4>

080013b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013bc:	e7fe      	b.n	80013bc <UsageFault_Handler+0x4>

080013be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013da:	b480      	push	{r7}
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ec:	f000 f898 	bl	8001520 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013f0:	bf00      	nop
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80013f8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80013fc:	f001 fec8 	bl	8003190 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001400:	bf00      	nop
 8001402:	bd80      	pop	{r7, pc}

08001404 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <SystemInit+0x20>)
 800140a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800140e:	4a05      	ldr	r2, [pc, #20]	; (8001424 <SystemInit+0x20>)
 8001410:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001414:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001428:	480d      	ldr	r0, [pc, #52]	; (8001460 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800142a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800142c:	480d      	ldr	r0, [pc, #52]	; (8001464 <LoopForever+0x6>)
  ldr r1, =_edata
 800142e:	490e      	ldr	r1, [pc, #56]	; (8001468 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001430:	4a0e      	ldr	r2, [pc, #56]	; (800146c <LoopForever+0xe>)
  movs r3, #0
 8001432:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001434:	e002      	b.n	800143c <LoopCopyDataInit>

08001436 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001436:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001438:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800143a:	3304      	adds	r3, #4

0800143c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800143c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800143e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001440:	d3f9      	bcc.n	8001436 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001442:	4a0b      	ldr	r2, [pc, #44]	; (8001470 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001444:	4c0b      	ldr	r4, [pc, #44]	; (8001474 <LoopForever+0x16>)
  movs r3, #0
 8001446:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001448:	e001      	b.n	800144e <LoopFillZerobss>

0800144a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800144a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800144c:	3204      	adds	r2, #4

0800144e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800144e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001450:	d3fb      	bcc.n	800144a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001452:	f7ff ffd7 	bl	8001404 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001456:	f003 fd01 	bl	8004e5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800145a:	f7ff fc79 	bl	8000d50 <main>

0800145e <LoopForever>:

LoopForever:
    b LoopForever
 800145e:	e7fe      	b.n	800145e <LoopForever>
  ldr   r0, =_estack
 8001460:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001464:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001468:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800146c:	08004f0c 	.word	0x08004f0c
  ldr r2, =_sbss
 8001470:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001474:	20000148 	.word	0x20000148

08001478 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001478:	e7fe      	b.n	8001478 <ADC1_2_IRQHandler>

0800147a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b082      	sub	sp, #8
 800147e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001480:	2300      	movs	r3, #0
 8001482:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001484:	2003      	movs	r0, #3
 8001486:	f001 fa65 	bl	8002954 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800148a:	2000      	movs	r0, #0
 800148c:	f000 f80e 	bl	80014ac <HAL_InitTick>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d002      	beq.n	800149c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	71fb      	strb	r3, [r7, #7]
 800149a:	e001      	b.n	80014a0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800149c:	f7ff fe72 	bl	8001184 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014a0:	79fb      	ldrb	r3, [r7, #7]

}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
	...

080014ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014b4:	2300      	movs	r3, #0
 80014b6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80014b8:	4b16      	ldr	r3, [pc, #88]	; (8001514 <HAL_InitTick+0x68>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d022      	beq.n	8001506 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80014c0:	4b15      	ldr	r3, [pc, #84]	; (8001518 <HAL_InitTick+0x6c>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	4b13      	ldr	r3, [pc, #76]	; (8001514 <HAL_InitTick+0x68>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80014cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80014d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d4:	4618      	mov	r0, r3
 80014d6:	f001 fa70 	bl	80029ba <HAL_SYSTICK_Config>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d10f      	bne.n	8001500 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b0f      	cmp	r3, #15
 80014e4:	d809      	bhi.n	80014fa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014e6:	2200      	movs	r2, #0
 80014e8:	6879      	ldr	r1, [r7, #4]
 80014ea:	f04f 30ff 	mov.w	r0, #4294967295
 80014ee:	f001 fa3c 	bl	800296a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014f2:	4a0a      	ldr	r2, [pc, #40]	; (800151c <HAL_InitTick+0x70>)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6013      	str	r3, [r2, #0]
 80014f8:	e007      	b.n	800150a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	73fb      	strb	r3, [r7, #15]
 80014fe:	e004      	b.n	800150a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	73fb      	strb	r3, [r7, #15]
 8001504:	e001      	b.n	800150a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800150a:	7bfb      	ldrb	r3, [r7, #15]
}
 800150c:	4618      	mov	r0, r3
 800150e:	3710      	adds	r7, #16
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000008 	.word	0x20000008
 8001518:	20000000 	.word	0x20000000
 800151c:	20000004 	.word	0x20000004

08001520 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001524:	4b05      	ldr	r3, [pc, #20]	; (800153c <HAL_IncTick+0x1c>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	4b05      	ldr	r3, [pc, #20]	; (8001540 <HAL_IncTick+0x20>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4413      	add	r3, r2
 800152e:	4a03      	ldr	r2, [pc, #12]	; (800153c <HAL_IncTick+0x1c>)
 8001530:	6013      	str	r3, [r2, #0]
}
 8001532:	bf00      	nop
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	20000144 	.word	0x20000144
 8001540:	20000008 	.word	0x20000008

08001544 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  return uwTick;
 8001548:	4b03      	ldr	r3, [pc, #12]	; (8001558 <HAL_GetTick+0x14>)
 800154a:	681b      	ldr	r3, [r3, #0]
}
 800154c:	4618      	mov	r0, r3
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	20000144 	.word	0x20000144

0800155c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001564:	f7ff ffee 	bl	8001544 <HAL_GetTick>
 8001568:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001574:	d004      	beq.n	8001580 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001576:	4b09      	ldr	r3, [pc, #36]	; (800159c <HAL_Delay+0x40>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	4413      	add	r3, r2
 800157e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001580:	bf00      	nop
 8001582:	f7ff ffdf 	bl	8001544 <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	68fa      	ldr	r2, [r7, #12]
 800158e:	429a      	cmp	r2, r3
 8001590:	d8f7      	bhi.n	8001582 <HAL_Delay+0x26>
  {
  }
}
 8001592:	bf00      	nop
 8001594:	bf00      	nop
 8001596:	3710      	adds	r7, #16
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000008 	.word	0x20000008

080015a0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	431a      	orrs	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	609a      	str	r2, [r3, #8]
}
 80015ba:	bf00      	nop
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr

080015c6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80015c6:	b480      	push	{r7}
 80015c8:	b083      	sub	sp, #12
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
 80015ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	431a      	orrs	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	609a      	str	r2, [r3, #8]
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001608:	b480      	push	{r7}
 800160a:	b087      	sub	sp, #28
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
 8001614:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	3360      	adds	r3, #96	; 0x60
 800161a:	461a      	mov	r2, r3
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	4413      	add	r3, r2
 8001622:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	4b08      	ldr	r3, [pc, #32]	; (800164c <LL_ADC_SetOffset+0x44>)
 800162a:	4013      	ands	r3, r2
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001632:	683a      	ldr	r2, [r7, #0]
 8001634:	430a      	orrs	r2, r1
 8001636:	4313      	orrs	r3, r2
 8001638:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001640:	bf00      	nop
 8001642:	371c      	adds	r7, #28
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	03fff000 	.word	0x03fff000

08001650 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	3360      	adds	r3, #96	; 0x60
 800165e:	461a      	mov	r2, r3
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	4413      	add	r3, r2
 8001666:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001670:	4618      	mov	r0, r3
 8001672:	3714      	adds	r7, #20
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800167c:	b480      	push	{r7}
 800167e:	b087      	sub	sp, #28
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	3360      	adds	r3, #96	; 0x60
 800168c:	461a      	mov	r2, r3
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	4413      	add	r3, r2
 8001694:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	431a      	orrs	r2, r3
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80016a6:	bf00      	nop
 80016a8:	371c      	adds	r7, #28
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80016b2:	b480      	push	{r7}
 80016b4:	b087      	sub	sp, #28
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	60f8      	str	r0, [r7, #12]
 80016ba:	60b9      	str	r1, [r7, #8]
 80016bc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	3360      	adds	r3, #96	; 0x60
 80016c2:	461a      	mov	r2, r3
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	4413      	add	r3, r2
 80016ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	431a      	orrs	r2, r3
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80016dc:	bf00      	nop
 80016de:	371c      	adds	r7, #28
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b087      	sub	sp, #28
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	3360      	adds	r3, #96	; 0x60
 80016f8:	461a      	mov	r2, r3
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4413      	add	r3, r2
 8001700:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	431a      	orrs	r2, r3
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001712:	bf00      	nop
 8001714:	371c      	adds	r7, #28
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800171e:	b480      	push	{r7}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
 8001726:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	695b      	ldr	r3, [r3, #20]
 800172c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	431a      	orrs	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	615a      	str	r2, [r3, #20]
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001744:	b480      	push	{r7}
 8001746:	b087      	sub	sp, #28
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	3330      	adds	r3, #48	; 0x30
 8001754:	461a      	mov	r2, r3
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	0a1b      	lsrs	r3, r3, #8
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	f003 030c 	and.w	r3, r3, #12
 8001760:	4413      	add	r3, r2
 8001762:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	f003 031f 	and.w	r3, r3, #31
 800176e:	211f      	movs	r1, #31
 8001770:	fa01 f303 	lsl.w	r3, r1, r3
 8001774:	43db      	mvns	r3, r3
 8001776:	401a      	ands	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	0e9b      	lsrs	r3, r3, #26
 800177c:	f003 011f 	and.w	r1, r3, #31
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	f003 031f 	and.w	r3, r3, #31
 8001786:	fa01 f303 	lsl.w	r3, r1, r3
 800178a:	431a      	orrs	r2, r3
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001790:	bf00      	nop
 8001792:	371c      	adds	r7, #28
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800179c:	b480      	push	{r7}
 800179e:	b087      	sub	sp, #28
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	3314      	adds	r3, #20
 80017ac:	461a      	mov	r2, r3
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	0e5b      	lsrs	r3, r3, #25
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	f003 0304 	and.w	r3, r3, #4
 80017b8:	4413      	add	r3, r2
 80017ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	0d1b      	lsrs	r3, r3, #20
 80017c4:	f003 031f 	and.w	r3, r3, #31
 80017c8:	2107      	movs	r1, #7
 80017ca:	fa01 f303 	lsl.w	r3, r1, r3
 80017ce:	43db      	mvns	r3, r3
 80017d0:	401a      	ands	r2, r3
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	0d1b      	lsrs	r3, r3, #20
 80017d6:	f003 031f 	and.w	r3, r3, #31
 80017da:	6879      	ldr	r1, [r7, #4]
 80017dc:	fa01 f303 	lsl.w	r3, r1, r3
 80017e0:	431a      	orrs	r2, r3
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80017e6:	bf00      	nop
 80017e8:	371c      	adds	r7, #28
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
	...

080017f4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4a0f      	ldr	r2, [pc, #60]	; (8001840 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d10a      	bne.n	800181e <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001814:	431a      	orrs	r2, r3
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 800181c:	e00a      	b.n	8001834 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800182a:	43db      	mvns	r3, r3
 800182c:	401a      	ands	r2, r3
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001834:	bf00      	nop
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	407f0000 	.word	0x407f0000

08001844 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001854:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	6093      	str	r3, [r2, #8]
}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001878:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800187c:	d101      	bne.n	8001882 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800187e:	2301      	movs	r3, #1
 8001880:	e000      	b.n	8001884 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001882:	2300      	movs	r3, #0
}
 8001884:	4618      	mov	r0, r3
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80018a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018a4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80018cc:	d101      	bne.n	80018d2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80018ce:	2301      	movs	r3, #1
 80018d0:	e000      	b.n	80018d4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80018d2:	2300      	movs	r3, #0
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f003 0301 	and.w	r3, r3, #1
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d101      	bne.n	80018f8 <LL_ADC_IsEnabled+0x18>
 80018f4:	2301      	movs	r3, #1
 80018f6:	e000      	b.n	80018fa <LL_ADC_IsEnabled+0x1a>
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr

08001906 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001906:	b480      	push	{r7}
 8001908:	b083      	sub	sp, #12
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f003 0304 	and.w	r3, r3, #4
 8001916:	2b04      	cmp	r3, #4
 8001918:	d101      	bne.n	800191e <LL_ADC_REG_IsConversionOngoing+0x18>
 800191a:	2301      	movs	r3, #1
 800191c:	e000      	b.n	8001920 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800191e:	2300      	movs	r3, #0
}
 8001920:	4618      	mov	r0, r3
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f003 0308 	and.w	r3, r3, #8
 800193c:	2b08      	cmp	r3, #8
 800193e:	d101      	bne.n	8001944 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001940:	2301      	movs	r3, #1
 8001942:	e000      	b.n	8001946 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
	...

08001954 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001954:	b590      	push	{r4, r7, lr}
 8001956:	b089      	sub	sp, #36	; 0x24
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800195c:	2300      	movs	r3, #0
 800195e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001960:	2300      	movs	r3, #0
 8001962:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d101      	bne.n	800196e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e1af      	b.n	8001cce <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	695b      	ldr	r3, [r3, #20]
 8001972:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001978:	2b00      	cmp	r3, #0
 800197a:	d109      	bne.n	8001990 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff fc25 	bl	80011cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff ff67 	bl	8001868 <LL_ADC_IsDeepPowerDownEnabled>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d004      	beq.n	80019aa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff ff4d 	bl	8001844 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff ff82 	bl	80018b8 <LL_ADC_IsInternalRegulatorEnabled>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d115      	bne.n	80019e6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff ff66 	bl	8001890 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80019c4:	4b9f      	ldr	r3, [pc, #636]	; (8001c44 <HAL_ADC_Init+0x2f0>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	099b      	lsrs	r3, r3, #6
 80019ca:	4a9f      	ldr	r2, [pc, #636]	; (8001c48 <HAL_ADC_Init+0x2f4>)
 80019cc:	fba2 2303 	umull	r2, r3, r2, r3
 80019d0:	099b      	lsrs	r3, r3, #6
 80019d2:	3301      	adds	r3, #1
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80019d8:	e002      	b.n	80019e0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	3b01      	subs	r3, #1
 80019de:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1f9      	bne.n	80019da <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff ff64 	bl	80018b8 <LL_ADC_IsInternalRegulatorEnabled>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d10d      	bne.n	8001a12 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019fa:	f043 0210 	orr.w	r2, r3, #16
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a06:	f043 0201 	orr.w	r2, r3, #1
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff ff75 	bl	8001906 <LL_ADC_REG_IsConversionOngoing>
 8001a1c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a22:	f003 0310 	and.w	r3, r3, #16
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	f040 8148 	bne.w	8001cbc <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f040 8144 	bne.w	8001cbc <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a38:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001a3c:	f043 0202 	orr.w	r2, r3, #2
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff49 	bl	80018e0 <LL_ADC_IsEnabled>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d141      	bne.n	8001ad8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a5c:	d004      	beq.n	8001a68 <HAL_ADC_Init+0x114>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a7a      	ldr	r2, [pc, #488]	; (8001c4c <HAL_ADC_Init+0x2f8>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d10f      	bne.n	8001a88 <HAL_ADC_Init+0x134>
 8001a68:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001a6c:	f7ff ff38 	bl	80018e0 <LL_ADC_IsEnabled>
 8001a70:	4604      	mov	r4, r0
 8001a72:	4876      	ldr	r0, [pc, #472]	; (8001c4c <HAL_ADC_Init+0x2f8>)
 8001a74:	f7ff ff34 	bl	80018e0 <LL_ADC_IsEnabled>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	4323      	orrs	r3, r4
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	bf0c      	ite	eq
 8001a80:	2301      	moveq	r3, #1
 8001a82:	2300      	movne	r3, #0
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	e012      	b.n	8001aae <HAL_ADC_Init+0x15a>
 8001a88:	4871      	ldr	r0, [pc, #452]	; (8001c50 <HAL_ADC_Init+0x2fc>)
 8001a8a:	f7ff ff29 	bl	80018e0 <LL_ADC_IsEnabled>
 8001a8e:	4604      	mov	r4, r0
 8001a90:	4870      	ldr	r0, [pc, #448]	; (8001c54 <HAL_ADC_Init+0x300>)
 8001a92:	f7ff ff25 	bl	80018e0 <LL_ADC_IsEnabled>
 8001a96:	4603      	mov	r3, r0
 8001a98:	431c      	orrs	r4, r3
 8001a9a:	486f      	ldr	r0, [pc, #444]	; (8001c58 <HAL_ADC_Init+0x304>)
 8001a9c:	f7ff ff20 	bl	80018e0 <LL_ADC_IsEnabled>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	4323      	orrs	r3, r4
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	bf0c      	ite	eq
 8001aa8:	2301      	moveq	r3, #1
 8001aaa:	2300      	movne	r3, #0
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d012      	beq.n	8001ad8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001aba:	d004      	beq.n	8001ac6 <HAL_ADC_Init+0x172>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a62      	ldr	r2, [pc, #392]	; (8001c4c <HAL_ADC_Init+0x2f8>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d101      	bne.n	8001aca <HAL_ADC_Init+0x176>
 8001ac6:	4a65      	ldr	r2, [pc, #404]	; (8001c5c <HAL_ADC_Init+0x308>)
 8001ac8:	e000      	b.n	8001acc <HAL_ADC_Init+0x178>
 8001aca:	4a65      	ldr	r2, [pc, #404]	; (8001c60 <HAL_ADC_Init+0x30c>)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4610      	mov	r0, r2
 8001ad4:	f7ff fd64 	bl	80015a0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	7f5b      	ldrb	r3, [r3, #29]
 8001adc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ae2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001ae8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001aee:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001af6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001af8:	4313      	orrs	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d106      	bne.n	8001b14 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	045b      	lsls	r3, r3, #17
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d009      	beq.n	8001b30 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b20:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b28:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	68da      	ldr	r2, [r3, #12]
 8001b36:	4b4b      	ldr	r3, [pc, #300]	; (8001c64 <HAL_ADC_Init+0x310>)
 8001b38:	4013      	ands	r3, r2
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	6812      	ldr	r2, [r2, #0]
 8001b3e:	69b9      	ldr	r1, [r7, #24]
 8001b40:	430b      	orrs	r3, r1
 8001b42:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	691b      	ldr	r3, [r3, #16]
 8001b4a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	430a      	orrs	r2, r1
 8001b58:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff fed1 	bl	8001906 <LL_ADC_REG_IsConversionOngoing>
 8001b64:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff fede 	bl	800192c <LL_ADC_INJ_IsConversionOngoing>
 8001b70:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d17f      	bne.n	8001c78 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d17c      	bne.n	8001c78 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b82:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b8a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b9a:	f023 0302 	bic.w	r3, r3, #2
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	6812      	ldr	r2, [r2, #0]
 8001ba2:	69b9      	ldr	r1, [r7, #24]
 8001ba4:	430b      	orrs	r3, r1
 8001ba6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d017      	beq.n	8001be0 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	691a      	ldr	r2, [r3, #16]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001bbe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001bc8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001bcc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	6911      	ldr	r1, [r2, #16]
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	6812      	ldr	r2, [r2, #0]
 8001bd8:	430b      	orrs	r3, r1
 8001bda:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001bde:	e013      	b.n	8001c08 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	691a      	ldr	r2, [r3, #16]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001bee:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	6812      	ldr	r2, [r2, #0]
 8001bfc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001c00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c04:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d12a      	bne.n	8001c68 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	691b      	ldr	r3, [r3, #16]
 8001c18:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001c1c:	f023 0304 	bic.w	r3, r3, #4
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c28:	4311      	orrs	r1, r2
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001c2e:	4311      	orrs	r1, r2
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001c34:	430a      	orrs	r2, r1
 8001c36:	431a      	orrs	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f042 0201 	orr.w	r2, r2, #1
 8001c40:	611a      	str	r2, [r3, #16]
 8001c42:	e019      	b.n	8001c78 <HAL_ADC_Init+0x324>
 8001c44:	20000000 	.word	0x20000000
 8001c48:	053e2d63 	.word	0x053e2d63
 8001c4c:	50000100 	.word	0x50000100
 8001c50:	50000400 	.word	0x50000400
 8001c54:	50000500 	.word	0x50000500
 8001c58:	50000600 	.word	0x50000600
 8001c5c:	50000300 	.word	0x50000300
 8001c60:	50000700 	.word	0x50000700
 8001c64:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	691a      	ldr	r2, [r3, #16]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f022 0201 	bic.w	r2, r2, #1
 8001c76:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	695b      	ldr	r3, [r3, #20]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d10c      	bne.n	8001c9a <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	f023 010f 	bic.w	r1, r3, #15
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a1b      	ldr	r3, [r3, #32]
 8001c8e:	1e5a      	subs	r2, r3, #1
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	430a      	orrs	r2, r1
 8001c96:	631a      	str	r2, [r3, #48]	; 0x30
 8001c98:	e007      	b.n	8001caa <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f022 020f 	bic.w	r2, r2, #15
 8001ca8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cae:	f023 0303 	bic.w	r3, r3, #3
 8001cb2:	f043 0201 	orr.w	r2, r3, #1
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	65da      	str	r2, [r3, #92]	; 0x5c
 8001cba:	e007      	b.n	8001ccc <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc0:	f043 0210 	orr.w	r2, r3, #16
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ccc:	7ffb      	ldrb	r3, [r7, #31]
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3724      	adds	r7, #36	; 0x24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd90      	pop	{r4, r7, pc}
 8001cd6:	bf00      	nop

08001cd8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b0b6      	sub	sp, #216	; 0xd8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d102      	bne.n	8001cfc <HAL_ADC_ConfigChannel+0x24>
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	f000 bc13 	b.w	8002522 <HAL_ADC_ConfigChannel+0x84a>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff fdfc 	bl	8001906 <LL_ADC_REG_IsConversionOngoing>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	f040 83f3 	bne.w	80024fc <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6818      	ldr	r0, [r3, #0]
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	6859      	ldr	r1, [r3, #4]
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	461a      	mov	r2, r3
 8001d24:	f7ff fd0e 	bl	8001744 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff fdea 	bl	8001906 <LL_ADC_REG_IsConversionOngoing>
 8001d32:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff fdf6 	bl	800192c <LL_ADC_INJ_IsConversionOngoing>
 8001d40:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d44:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	f040 81d9 	bne.w	8002100 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d4e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f040 81d4 	bne.w	8002100 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d60:	d10f      	bne.n	8001d82 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6818      	ldr	r0, [r3, #0]
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	f7ff fd15 	bl	800179c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff fccf 	bl	800171e <LL_ADC_SetSamplingTimeCommonConfig>
 8001d80:	e00e      	b.n	8001da0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6818      	ldr	r0, [r3, #0]
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	6819      	ldr	r1, [r3, #0]
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	f7ff fd04 	bl	800179c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2100      	movs	r1, #0
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff fcbf 	bl	800171e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	695a      	ldr	r2, [r3, #20]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	08db      	lsrs	r3, r3, #3
 8001dac:	f003 0303 	and.w	r3, r3, #3
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	2b04      	cmp	r3, #4
 8001dc0:	d022      	beq.n	8001e08 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6818      	ldr	r0, [r3, #0]
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	6919      	ldr	r1, [r3, #16]
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001dd2:	f7ff fc19 	bl	8001608 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6818      	ldr	r0, [r3, #0]
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	6919      	ldr	r1, [r3, #16]
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	461a      	mov	r2, r3
 8001de4:	f7ff fc65 	bl	80016b2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6818      	ldr	r0, [r3, #0]
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	6919      	ldr	r1, [r3, #16]
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	7f1b      	ldrb	r3, [r3, #28]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d102      	bne.n	8001dfe <HAL_ADC_ConfigChannel+0x126>
 8001df8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dfc:	e000      	b.n	8001e00 <HAL_ADC_ConfigChannel+0x128>
 8001dfe:	2300      	movs	r3, #0
 8001e00:	461a      	mov	r2, r3
 8001e02:	f7ff fc71 	bl	80016e8 <LL_ADC_SetOffsetSaturation>
 8001e06:	e17b      	b.n	8002100 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff fc1e 	bl	8001650 <LL_ADC_GetOffsetChannel>
 8001e14:	4603      	mov	r3, r0
 8001e16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d10a      	bne.n	8001e34 <HAL_ADC_ConfigChannel+0x15c>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2100      	movs	r1, #0
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff fc13 	bl	8001650 <LL_ADC_GetOffsetChannel>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	0e9b      	lsrs	r3, r3, #26
 8001e2e:	f003 021f 	and.w	r2, r3, #31
 8001e32:	e01e      	b.n	8001e72 <HAL_ADC_ConfigChannel+0x19a>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2100      	movs	r1, #0
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff fc08 	bl	8001650 <LL_ADC_GetOffsetChannel>
 8001e40:	4603      	mov	r3, r0
 8001e42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e46:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001e4a:	fa93 f3a3 	rbit	r3, r3
 8001e4e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001e56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001e62:	2320      	movs	r3, #32
 8001e64:	e004      	b.n	8001e70 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001e66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e6a:	fab3 f383 	clz	r3, r3
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d105      	bne.n	8001e8a <HAL_ADC_ConfigChannel+0x1b2>
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	0e9b      	lsrs	r3, r3, #26
 8001e84:	f003 031f 	and.w	r3, r3, #31
 8001e88:	e018      	b.n	8001ebc <HAL_ADC_ConfigChannel+0x1e4>
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e92:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001e96:	fa93 f3a3 	rbit	r3, r3
 8001e9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001e9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ea2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001ea6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001eae:	2320      	movs	r3, #32
 8001eb0:	e004      	b.n	8001ebc <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001eb2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001eb6:	fab3 f383 	clz	r3, r3
 8001eba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d106      	bne.n	8001ece <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff fbd7 	bl	800167c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff fbbb 	bl	8001650 <LL_ADC_GetOffsetChannel>
 8001eda:	4603      	mov	r3, r0
 8001edc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d10a      	bne.n	8001efa <HAL_ADC_ConfigChannel+0x222>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2101      	movs	r1, #1
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff fbb0 	bl	8001650 <LL_ADC_GetOffsetChannel>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	0e9b      	lsrs	r3, r3, #26
 8001ef4:	f003 021f 	and.w	r2, r3, #31
 8001ef8:	e01e      	b.n	8001f38 <HAL_ADC_ConfigChannel+0x260>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2101      	movs	r1, #1
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff fba5 	bl	8001650 <LL_ADC_GetOffsetChannel>
 8001f06:	4603      	mov	r3, r0
 8001f08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f10:	fa93 f3a3 	rbit	r3, r3
 8001f14:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001f18:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001f20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001f28:	2320      	movs	r3, #32
 8001f2a:	e004      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001f2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f30:	fab3 f383 	clz	r3, r3
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d105      	bne.n	8001f50 <HAL_ADC_ConfigChannel+0x278>
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	0e9b      	lsrs	r3, r3, #26
 8001f4a:	f003 031f 	and.w	r3, r3, #31
 8001f4e:	e018      	b.n	8001f82 <HAL_ADC_ConfigChannel+0x2aa>
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f5c:	fa93 f3a3 	rbit	r3, r3
 8001f60:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001f64:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001f6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d101      	bne.n	8001f78 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001f74:	2320      	movs	r3, #32
 8001f76:	e004      	b.n	8001f82 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001f78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f7c:	fab3 f383 	clz	r3, r3
 8001f80:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d106      	bne.n	8001f94 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	2101      	movs	r1, #1
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff fb74 	bl	800167c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2102      	movs	r1, #2
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff fb58 	bl	8001650 <LL_ADC_GetOffsetChannel>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d10a      	bne.n	8001fc0 <HAL_ADC_ConfigChannel+0x2e8>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2102      	movs	r1, #2
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff fb4d 	bl	8001650 <LL_ADC_GetOffsetChannel>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	0e9b      	lsrs	r3, r3, #26
 8001fba:	f003 021f 	and.w	r2, r3, #31
 8001fbe:	e01e      	b.n	8001ffe <HAL_ADC_ConfigChannel+0x326>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2102      	movs	r1, #2
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7ff fb42 	bl	8001650 <LL_ADC_GetOffsetChannel>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001fd6:	fa93 f3a3 	rbit	r3, r3
 8001fda:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001fde:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001fe2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001fe6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001fee:	2320      	movs	r3, #32
 8001ff0:	e004      	b.n	8001ffc <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001ff2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ff6:	fab3 f383 	clz	r3, r3
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002006:	2b00      	cmp	r3, #0
 8002008:	d105      	bne.n	8002016 <HAL_ADC_ConfigChannel+0x33e>
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	0e9b      	lsrs	r3, r3, #26
 8002010:	f003 031f 	and.w	r3, r3, #31
 8002014:	e016      	b.n	8002044 <HAL_ADC_ConfigChannel+0x36c>
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002022:	fa93 f3a3 	rbit	r3, r3
 8002026:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002028:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800202a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800202e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002036:	2320      	movs	r3, #32
 8002038:	e004      	b.n	8002044 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800203a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800203e:	fab3 f383 	clz	r3, r3
 8002042:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002044:	429a      	cmp	r2, r3
 8002046:	d106      	bne.n	8002056 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2200      	movs	r2, #0
 800204e:	2102      	movs	r1, #2
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff fb13 	bl	800167c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2103      	movs	r1, #3
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff faf7 	bl	8001650 <LL_ADC_GetOffsetChannel>
 8002062:	4603      	mov	r3, r0
 8002064:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002068:	2b00      	cmp	r3, #0
 800206a:	d10a      	bne.n	8002082 <HAL_ADC_ConfigChannel+0x3aa>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2103      	movs	r1, #3
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff faec 	bl	8001650 <LL_ADC_GetOffsetChannel>
 8002078:	4603      	mov	r3, r0
 800207a:	0e9b      	lsrs	r3, r3, #26
 800207c:	f003 021f 	and.w	r2, r3, #31
 8002080:	e017      	b.n	80020b2 <HAL_ADC_ConfigChannel+0x3da>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2103      	movs	r1, #3
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff fae1 	bl	8001650 <LL_ADC_GetOffsetChannel>
 800208e:	4603      	mov	r3, r0
 8002090:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002092:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002094:	fa93 f3a3 	rbit	r3, r3
 8002098:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800209a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800209c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800209e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d101      	bne.n	80020a8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80020a4:	2320      	movs	r3, #32
 80020a6:	e003      	b.n	80020b0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80020a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020aa:	fab3 f383 	clz	r3, r3
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d105      	bne.n	80020ca <HAL_ADC_ConfigChannel+0x3f2>
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	0e9b      	lsrs	r3, r3, #26
 80020c4:	f003 031f 	and.w	r3, r3, #31
 80020c8:	e011      	b.n	80020ee <HAL_ADC_ConfigChannel+0x416>
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020d2:	fa93 f3a3 	rbit	r3, r3
 80020d6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80020d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020da:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80020dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80020e2:	2320      	movs	r3, #32
 80020e4:	e003      	b.n	80020ee <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80020e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020e8:	fab3 f383 	clz	r3, r3
 80020ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d106      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2200      	movs	r2, #0
 80020f8:	2103      	movs	r1, #3
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff fabe 	bl	800167c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff fbeb 	bl	80018e0 <LL_ADC_IsEnabled>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	f040 813d 	bne.w	800238c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6818      	ldr	r0, [r3, #0]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	6819      	ldr	r1, [r3, #0]
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	461a      	mov	r2, r3
 8002120:	f7ff fb68 	bl	80017f4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	4aa2      	ldr	r2, [pc, #648]	; (80023b4 <HAL_ADC_ConfigChannel+0x6dc>)
 800212a:	4293      	cmp	r3, r2
 800212c:	f040 812e 	bne.w	800238c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800213c:	2b00      	cmp	r3, #0
 800213e:	d10b      	bne.n	8002158 <HAL_ADC_ConfigChannel+0x480>
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	0e9b      	lsrs	r3, r3, #26
 8002146:	3301      	adds	r3, #1
 8002148:	f003 031f 	and.w	r3, r3, #31
 800214c:	2b09      	cmp	r3, #9
 800214e:	bf94      	ite	ls
 8002150:	2301      	movls	r3, #1
 8002152:	2300      	movhi	r3, #0
 8002154:	b2db      	uxtb	r3, r3
 8002156:	e019      	b.n	800218c <HAL_ADC_ConfigChannel+0x4b4>
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002160:	fa93 f3a3 	rbit	r3, r3
 8002164:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002166:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002168:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800216a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800216c:	2b00      	cmp	r3, #0
 800216e:	d101      	bne.n	8002174 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002170:	2320      	movs	r3, #32
 8002172:	e003      	b.n	800217c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002174:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002176:	fab3 f383 	clz	r3, r3
 800217a:	b2db      	uxtb	r3, r3
 800217c:	3301      	adds	r3, #1
 800217e:	f003 031f 	and.w	r3, r3, #31
 8002182:	2b09      	cmp	r3, #9
 8002184:	bf94      	ite	ls
 8002186:	2301      	movls	r3, #1
 8002188:	2300      	movhi	r3, #0
 800218a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800218c:	2b00      	cmp	r3, #0
 800218e:	d079      	beq.n	8002284 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002198:	2b00      	cmp	r3, #0
 800219a:	d107      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x4d4>
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	0e9b      	lsrs	r3, r3, #26
 80021a2:	3301      	adds	r3, #1
 80021a4:	069b      	lsls	r3, r3, #26
 80021a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021aa:	e015      	b.n	80021d8 <HAL_ADC_ConfigChannel+0x500>
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021b4:	fa93 f3a3 	rbit	r3, r3
 80021b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80021ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021bc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80021be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d101      	bne.n	80021c8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80021c4:	2320      	movs	r3, #32
 80021c6:	e003      	b.n	80021d0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80021c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021ca:	fab3 f383 	clz	r3, r3
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	3301      	adds	r3, #1
 80021d2:	069b      	lsls	r3, r3, #26
 80021d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d109      	bne.n	80021f8 <HAL_ADC_ConfigChannel+0x520>
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	0e9b      	lsrs	r3, r3, #26
 80021ea:	3301      	adds	r3, #1
 80021ec:	f003 031f 	and.w	r3, r3, #31
 80021f0:	2101      	movs	r1, #1
 80021f2:	fa01 f303 	lsl.w	r3, r1, r3
 80021f6:	e017      	b.n	8002228 <HAL_ADC_ConfigChannel+0x550>
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002200:	fa93 f3a3 	rbit	r3, r3
 8002204:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002206:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002208:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800220a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800220c:	2b00      	cmp	r3, #0
 800220e:	d101      	bne.n	8002214 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002210:	2320      	movs	r3, #32
 8002212:	e003      	b.n	800221c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002214:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002216:	fab3 f383 	clz	r3, r3
 800221a:	b2db      	uxtb	r3, r3
 800221c:	3301      	adds	r3, #1
 800221e:	f003 031f 	and.w	r3, r3, #31
 8002222:	2101      	movs	r1, #1
 8002224:	fa01 f303 	lsl.w	r3, r1, r3
 8002228:	ea42 0103 	orr.w	r1, r2, r3
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002234:	2b00      	cmp	r3, #0
 8002236:	d10a      	bne.n	800224e <HAL_ADC_ConfigChannel+0x576>
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	0e9b      	lsrs	r3, r3, #26
 800223e:	3301      	adds	r3, #1
 8002240:	f003 021f 	and.w	r2, r3, #31
 8002244:	4613      	mov	r3, r2
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	4413      	add	r3, r2
 800224a:	051b      	lsls	r3, r3, #20
 800224c:	e018      	b.n	8002280 <HAL_ADC_ConfigChannel+0x5a8>
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002256:	fa93 f3a3 	rbit	r3, r3
 800225a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800225c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800225e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002266:	2320      	movs	r3, #32
 8002268:	e003      	b.n	8002272 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800226a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800226c:	fab3 f383 	clz	r3, r3
 8002270:	b2db      	uxtb	r3, r3
 8002272:	3301      	adds	r3, #1
 8002274:	f003 021f 	and.w	r2, r3, #31
 8002278:	4613      	mov	r3, r2
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	4413      	add	r3, r2
 800227e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002280:	430b      	orrs	r3, r1
 8002282:	e07e      	b.n	8002382 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800228c:	2b00      	cmp	r3, #0
 800228e:	d107      	bne.n	80022a0 <HAL_ADC_ConfigChannel+0x5c8>
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	0e9b      	lsrs	r3, r3, #26
 8002296:	3301      	adds	r3, #1
 8002298:	069b      	lsls	r3, r3, #26
 800229a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800229e:	e015      	b.n	80022cc <HAL_ADC_ConfigChannel+0x5f4>
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a8:	fa93 f3a3 	rbit	r3, r3
 80022ac:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80022ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80022b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d101      	bne.n	80022bc <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80022b8:	2320      	movs	r3, #32
 80022ba:	e003      	b.n	80022c4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80022bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022be:	fab3 f383 	clz	r3, r3
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	3301      	adds	r3, #1
 80022c6:	069b      	lsls	r3, r3, #26
 80022c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d109      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x614>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	0e9b      	lsrs	r3, r3, #26
 80022de:	3301      	adds	r3, #1
 80022e0:	f003 031f 	and.w	r3, r3, #31
 80022e4:	2101      	movs	r1, #1
 80022e6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ea:	e017      	b.n	800231c <HAL_ADC_ConfigChannel+0x644>
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f2:	6a3b      	ldr	r3, [r7, #32]
 80022f4:	fa93 f3a3 	rbit	r3, r3
 80022f8:	61fb      	str	r3, [r7, #28]
  return result;
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80022fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002304:	2320      	movs	r3, #32
 8002306:	e003      	b.n	8002310 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230a:	fab3 f383 	clz	r3, r3
 800230e:	b2db      	uxtb	r3, r3
 8002310:	3301      	adds	r3, #1
 8002312:	f003 031f 	and.w	r3, r3, #31
 8002316:	2101      	movs	r1, #1
 8002318:	fa01 f303 	lsl.w	r3, r1, r3
 800231c:	ea42 0103 	orr.w	r1, r2, r3
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002328:	2b00      	cmp	r3, #0
 800232a:	d10d      	bne.n	8002348 <HAL_ADC_ConfigChannel+0x670>
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	0e9b      	lsrs	r3, r3, #26
 8002332:	3301      	adds	r3, #1
 8002334:	f003 021f 	and.w	r2, r3, #31
 8002338:	4613      	mov	r3, r2
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	4413      	add	r3, r2
 800233e:	3b1e      	subs	r3, #30
 8002340:	051b      	lsls	r3, r3, #20
 8002342:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002346:	e01b      	b.n	8002380 <HAL_ADC_ConfigChannel+0x6a8>
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	fa93 f3a3 	rbit	r3, r3
 8002354:	613b      	str	r3, [r7, #16]
  return result;
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d101      	bne.n	8002364 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002360:	2320      	movs	r3, #32
 8002362:	e003      	b.n	800236c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	fab3 f383 	clz	r3, r3
 800236a:	b2db      	uxtb	r3, r3
 800236c:	3301      	adds	r3, #1
 800236e:	f003 021f 	and.w	r2, r3, #31
 8002372:	4613      	mov	r3, r2
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	4413      	add	r3, r2
 8002378:	3b1e      	subs	r3, #30
 800237a:	051b      	lsls	r3, r3, #20
 800237c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002380:	430b      	orrs	r3, r1
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	6892      	ldr	r2, [r2, #8]
 8002386:	4619      	mov	r1, r3
 8002388:	f7ff fa08 	bl	800179c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	4b09      	ldr	r3, [pc, #36]	; (80023b8 <HAL_ADC_ConfigChannel+0x6e0>)
 8002392:	4013      	ands	r3, r2
 8002394:	2b00      	cmp	r3, #0
 8002396:	f000 80be 	beq.w	8002516 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023a2:	d004      	beq.n	80023ae <HAL_ADC_ConfigChannel+0x6d6>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a04      	ldr	r2, [pc, #16]	; (80023bc <HAL_ADC_ConfigChannel+0x6e4>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d10a      	bne.n	80023c4 <HAL_ADC_ConfigChannel+0x6ec>
 80023ae:	4b04      	ldr	r3, [pc, #16]	; (80023c0 <HAL_ADC_ConfigChannel+0x6e8>)
 80023b0:	e009      	b.n	80023c6 <HAL_ADC_ConfigChannel+0x6ee>
 80023b2:	bf00      	nop
 80023b4:	407f0000 	.word	0x407f0000
 80023b8:	80080000 	.word	0x80080000
 80023bc:	50000100 	.word	0x50000100
 80023c0:	50000300 	.word	0x50000300
 80023c4:	4b59      	ldr	r3, [pc, #356]	; (800252c <HAL_ADC_ConfigChannel+0x854>)
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff f910 	bl	80015ec <LL_ADC_GetCommonPathInternalCh>
 80023cc:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a56      	ldr	r2, [pc, #344]	; (8002530 <HAL_ADC_ConfigChannel+0x858>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d004      	beq.n	80023e4 <HAL_ADC_ConfigChannel+0x70c>
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a55      	ldr	r2, [pc, #340]	; (8002534 <HAL_ADC_ConfigChannel+0x85c>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d13a      	bne.n	800245a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80023e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d134      	bne.n	800245a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023f8:	d005      	beq.n	8002406 <HAL_ADC_ConfigChannel+0x72e>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a4e      	ldr	r2, [pc, #312]	; (8002538 <HAL_ADC_ConfigChannel+0x860>)
 8002400:	4293      	cmp	r3, r2
 8002402:	f040 8085 	bne.w	8002510 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800240e:	d004      	beq.n	800241a <HAL_ADC_ConfigChannel+0x742>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a49      	ldr	r2, [pc, #292]	; (800253c <HAL_ADC_ConfigChannel+0x864>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d101      	bne.n	800241e <HAL_ADC_ConfigChannel+0x746>
 800241a:	4a49      	ldr	r2, [pc, #292]	; (8002540 <HAL_ADC_ConfigChannel+0x868>)
 800241c:	e000      	b.n	8002420 <HAL_ADC_ConfigChannel+0x748>
 800241e:	4a43      	ldr	r2, [pc, #268]	; (800252c <HAL_ADC_ConfigChannel+0x854>)
 8002420:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002424:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002428:	4619      	mov	r1, r3
 800242a:	4610      	mov	r0, r2
 800242c:	f7ff f8cb 	bl	80015c6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002430:	4b44      	ldr	r3, [pc, #272]	; (8002544 <HAL_ADC_ConfigChannel+0x86c>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	099b      	lsrs	r3, r3, #6
 8002436:	4a44      	ldr	r2, [pc, #272]	; (8002548 <HAL_ADC_ConfigChannel+0x870>)
 8002438:	fba2 2303 	umull	r2, r3, r2, r3
 800243c:	099b      	lsrs	r3, r3, #6
 800243e:	1c5a      	adds	r2, r3, #1
 8002440:	4613      	mov	r3, r2
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	4413      	add	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800244a:	e002      	b.n	8002452 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	3b01      	subs	r3, #1
 8002450:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1f9      	bne.n	800244c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002458:	e05a      	b.n	8002510 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a3b      	ldr	r2, [pc, #236]	; (800254c <HAL_ADC_ConfigChannel+0x874>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d125      	bne.n	80024b0 <HAL_ADC_ConfigChannel+0x7d8>
 8002464:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002468:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d11f      	bne.n	80024b0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a31      	ldr	r2, [pc, #196]	; (800253c <HAL_ADC_ConfigChannel+0x864>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d104      	bne.n	8002484 <HAL_ADC_ConfigChannel+0x7ac>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a34      	ldr	r2, [pc, #208]	; (8002550 <HAL_ADC_ConfigChannel+0x878>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d047      	beq.n	8002514 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800248c:	d004      	beq.n	8002498 <HAL_ADC_ConfigChannel+0x7c0>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a2a      	ldr	r2, [pc, #168]	; (800253c <HAL_ADC_ConfigChannel+0x864>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d101      	bne.n	800249c <HAL_ADC_ConfigChannel+0x7c4>
 8002498:	4a29      	ldr	r2, [pc, #164]	; (8002540 <HAL_ADC_ConfigChannel+0x868>)
 800249a:	e000      	b.n	800249e <HAL_ADC_ConfigChannel+0x7c6>
 800249c:	4a23      	ldr	r2, [pc, #140]	; (800252c <HAL_ADC_ConfigChannel+0x854>)
 800249e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024a6:	4619      	mov	r1, r3
 80024a8:	4610      	mov	r0, r2
 80024aa:	f7ff f88c 	bl	80015c6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024ae:	e031      	b.n	8002514 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a27      	ldr	r2, [pc, #156]	; (8002554 <HAL_ADC_ConfigChannel+0x87c>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d12d      	bne.n	8002516 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80024ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d127      	bne.n	8002516 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a1c      	ldr	r2, [pc, #112]	; (800253c <HAL_ADC_ConfigChannel+0x864>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d022      	beq.n	8002516 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024d8:	d004      	beq.n	80024e4 <HAL_ADC_ConfigChannel+0x80c>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a17      	ldr	r2, [pc, #92]	; (800253c <HAL_ADC_ConfigChannel+0x864>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d101      	bne.n	80024e8 <HAL_ADC_ConfigChannel+0x810>
 80024e4:	4a16      	ldr	r2, [pc, #88]	; (8002540 <HAL_ADC_ConfigChannel+0x868>)
 80024e6:	e000      	b.n	80024ea <HAL_ADC_ConfigChannel+0x812>
 80024e8:	4a10      	ldr	r2, [pc, #64]	; (800252c <HAL_ADC_ConfigChannel+0x854>)
 80024ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024f2:	4619      	mov	r1, r3
 80024f4:	4610      	mov	r0, r2
 80024f6:	f7ff f866 	bl	80015c6 <LL_ADC_SetCommonPathInternalCh>
 80024fa:	e00c      	b.n	8002516 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002500:	f043 0220 	orr.w	r2, r3, #32
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800250e:	e002      	b.n	8002516 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002510:	bf00      	nop
 8002512:	e000      	b.n	8002516 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002514:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800251e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002522:	4618      	mov	r0, r3
 8002524:	37d8      	adds	r7, #216	; 0xd8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	50000700 	.word	0x50000700
 8002530:	c3210000 	.word	0xc3210000
 8002534:	90c00010 	.word	0x90c00010
 8002538:	50000600 	.word	0x50000600
 800253c:	50000100 	.word	0x50000100
 8002540:	50000300 	.word	0x50000300
 8002544:	20000000 	.word	0x20000000
 8002548:	053e2d63 	.word	0x053e2d63
 800254c:	c7520000 	.word	0xc7520000
 8002550:	50000500 	.word	0x50000500
 8002554:	cb840000 	.word	0xcb840000

08002558 <LL_ADC_IsEnabled>:
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	2b01      	cmp	r3, #1
 800256a:	d101      	bne.n	8002570 <LL_ADC_IsEnabled+0x18>
 800256c:	2301      	movs	r3, #1
 800256e:	e000      	b.n	8002572 <LL_ADC_IsEnabled+0x1a>
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <LL_ADC_REG_IsConversionOngoing>:
{
 800257e:	b480      	push	{r7}
 8002580:	b083      	sub	sp, #12
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 0304 	and.w	r3, r3, #4
 800258e:	2b04      	cmp	r3, #4
 8002590:	d101      	bne.n	8002596 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002592:	2301      	movs	r3, #1
 8002594:	e000      	b.n	8002598 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80025a4:	b590      	push	{r4, r7, lr}
 80025a6:	b0a1      	sub	sp, #132	; 0x84
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025ae:	2300      	movs	r3, #0
 80025b0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d101      	bne.n	80025c2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80025be:	2302      	movs	r3, #2
 80025c0:	e0e7      	b.n	8002792 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80025ca:	2300      	movs	r3, #0
 80025cc:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80025ce:	2300      	movs	r3, #0
 80025d0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025da:	d102      	bne.n	80025e2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80025dc:	4b6f      	ldr	r3, [pc, #444]	; (800279c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80025de:	60bb      	str	r3, [r7, #8]
 80025e0:	e009      	b.n	80025f6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a6e      	ldr	r2, [pc, #440]	; (80027a0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d102      	bne.n	80025f2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80025ec:	4b6d      	ldr	r3, [pc, #436]	; (80027a4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80025ee:	60bb      	str	r3, [r7, #8]
 80025f0:	e001      	b.n	80025f6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80025f2:	2300      	movs	r3, #0
 80025f4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d10b      	bne.n	8002614 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002600:	f043 0220 	orr.w	r2, r3, #32
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e0be      	b.n	8002792 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff ffb1 	bl	800257e <LL_ADC_REG_IsConversionOngoing>
 800261c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff ffab 	bl	800257e <LL_ADC_REG_IsConversionOngoing>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	f040 80a0 	bne.w	8002770 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002630:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002632:	2b00      	cmp	r3, #0
 8002634:	f040 809c 	bne.w	8002770 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002640:	d004      	beq.n	800264c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a55      	ldr	r2, [pc, #340]	; (800279c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d101      	bne.n	8002650 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800264c:	4b56      	ldr	r3, [pc, #344]	; (80027a8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800264e:	e000      	b.n	8002652 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002650:	4b56      	ldr	r3, [pc, #344]	; (80027ac <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002652:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d04b      	beq.n	80026f4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800265c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	6859      	ldr	r1, [r3, #4]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800266e:	035b      	lsls	r3, r3, #13
 8002670:	430b      	orrs	r3, r1
 8002672:	431a      	orrs	r2, r3
 8002674:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002676:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002680:	d004      	beq.n	800268c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a45      	ldr	r2, [pc, #276]	; (800279c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d10f      	bne.n	80026ac <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800268c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002690:	f7ff ff62 	bl	8002558 <LL_ADC_IsEnabled>
 8002694:	4604      	mov	r4, r0
 8002696:	4841      	ldr	r0, [pc, #260]	; (800279c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002698:	f7ff ff5e 	bl	8002558 <LL_ADC_IsEnabled>
 800269c:	4603      	mov	r3, r0
 800269e:	4323      	orrs	r3, r4
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	bf0c      	ite	eq
 80026a4:	2301      	moveq	r3, #1
 80026a6:	2300      	movne	r3, #0
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	e012      	b.n	80026d2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80026ac:	483c      	ldr	r0, [pc, #240]	; (80027a0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80026ae:	f7ff ff53 	bl	8002558 <LL_ADC_IsEnabled>
 80026b2:	4604      	mov	r4, r0
 80026b4:	483b      	ldr	r0, [pc, #236]	; (80027a4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80026b6:	f7ff ff4f 	bl	8002558 <LL_ADC_IsEnabled>
 80026ba:	4603      	mov	r3, r0
 80026bc:	431c      	orrs	r4, r3
 80026be:	483c      	ldr	r0, [pc, #240]	; (80027b0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80026c0:	f7ff ff4a 	bl	8002558 <LL_ADC_IsEnabled>
 80026c4:	4603      	mov	r3, r0
 80026c6:	4323      	orrs	r3, r4
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	bf0c      	ite	eq
 80026cc:	2301      	moveq	r3, #1
 80026ce:	2300      	movne	r3, #0
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d056      	beq.n	8002784 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80026d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80026de:	f023 030f 	bic.w	r3, r3, #15
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	6811      	ldr	r1, [r2, #0]
 80026e6:	683a      	ldr	r2, [r7, #0]
 80026e8:	6892      	ldr	r2, [r2, #8]
 80026ea:	430a      	orrs	r2, r1
 80026ec:	431a      	orrs	r2, r3
 80026ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026f0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80026f2:	e047      	b.n	8002784 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80026f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026fe:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002708:	d004      	beq.n	8002714 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a23      	ldr	r2, [pc, #140]	; (800279c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d10f      	bne.n	8002734 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002714:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002718:	f7ff ff1e 	bl	8002558 <LL_ADC_IsEnabled>
 800271c:	4604      	mov	r4, r0
 800271e:	481f      	ldr	r0, [pc, #124]	; (800279c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002720:	f7ff ff1a 	bl	8002558 <LL_ADC_IsEnabled>
 8002724:	4603      	mov	r3, r0
 8002726:	4323      	orrs	r3, r4
 8002728:	2b00      	cmp	r3, #0
 800272a:	bf0c      	ite	eq
 800272c:	2301      	moveq	r3, #1
 800272e:	2300      	movne	r3, #0
 8002730:	b2db      	uxtb	r3, r3
 8002732:	e012      	b.n	800275a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002734:	481a      	ldr	r0, [pc, #104]	; (80027a0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002736:	f7ff ff0f 	bl	8002558 <LL_ADC_IsEnabled>
 800273a:	4604      	mov	r4, r0
 800273c:	4819      	ldr	r0, [pc, #100]	; (80027a4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800273e:	f7ff ff0b 	bl	8002558 <LL_ADC_IsEnabled>
 8002742:	4603      	mov	r3, r0
 8002744:	431c      	orrs	r4, r3
 8002746:	481a      	ldr	r0, [pc, #104]	; (80027b0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002748:	f7ff ff06 	bl	8002558 <LL_ADC_IsEnabled>
 800274c:	4603      	mov	r3, r0
 800274e:	4323      	orrs	r3, r4
 8002750:	2b00      	cmp	r3, #0
 8002752:	bf0c      	ite	eq
 8002754:	2301      	moveq	r3, #1
 8002756:	2300      	movne	r3, #0
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d012      	beq.n	8002784 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800275e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002766:	f023 030f 	bic.w	r3, r3, #15
 800276a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800276c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800276e:	e009      	b.n	8002784 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002774:	f043 0220 	orr.w	r2, r3, #32
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002782:	e000      	b.n	8002786 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002784:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800278e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002792:	4618      	mov	r0, r3
 8002794:	3784      	adds	r7, #132	; 0x84
 8002796:	46bd      	mov	sp, r7
 8002798:	bd90      	pop	{r4, r7, pc}
 800279a:	bf00      	nop
 800279c:	50000100 	.word	0x50000100
 80027a0:	50000400 	.word	0x50000400
 80027a4:	50000500 	.word	0x50000500
 80027a8:	50000300 	.word	0x50000300
 80027ac:	50000700 	.word	0x50000700
 80027b0:	50000600 	.word	0x50000600

080027b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f003 0307 	and.w	r3, r3, #7
 80027c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027c4:	4b0c      	ldr	r3, [pc, #48]	; (80027f8 <__NVIC_SetPriorityGrouping+0x44>)
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027ca:	68ba      	ldr	r2, [r7, #8]
 80027cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027d0:	4013      	ands	r3, r2
 80027d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027e6:	4a04      	ldr	r2, [pc, #16]	; (80027f8 <__NVIC_SetPriorityGrouping+0x44>)
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	60d3      	str	r3, [r2, #12]
}
 80027ec:	bf00      	nop
 80027ee:	3714      	adds	r7, #20
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	e000ed00 	.word	0xe000ed00

080027fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002800:	4b04      	ldr	r3, [pc, #16]	; (8002814 <__NVIC_GetPriorityGrouping+0x18>)
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	0a1b      	lsrs	r3, r3, #8
 8002806:	f003 0307 	and.w	r3, r3, #7
}
 800280a:	4618      	mov	r0, r3
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	e000ed00 	.word	0xe000ed00

08002818 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	4603      	mov	r3, r0
 8002820:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002826:	2b00      	cmp	r3, #0
 8002828:	db0b      	blt.n	8002842 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800282a:	79fb      	ldrb	r3, [r7, #7]
 800282c:	f003 021f 	and.w	r2, r3, #31
 8002830:	4907      	ldr	r1, [pc, #28]	; (8002850 <__NVIC_EnableIRQ+0x38>)
 8002832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002836:	095b      	lsrs	r3, r3, #5
 8002838:	2001      	movs	r0, #1
 800283a:	fa00 f202 	lsl.w	r2, r0, r2
 800283e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002842:	bf00      	nop
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	e000e100 	.word	0xe000e100

08002854 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	4603      	mov	r3, r0
 800285c:	6039      	str	r1, [r7, #0]
 800285e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002864:	2b00      	cmp	r3, #0
 8002866:	db0a      	blt.n	800287e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	b2da      	uxtb	r2, r3
 800286c:	490c      	ldr	r1, [pc, #48]	; (80028a0 <__NVIC_SetPriority+0x4c>)
 800286e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002872:	0112      	lsls	r2, r2, #4
 8002874:	b2d2      	uxtb	r2, r2
 8002876:	440b      	add	r3, r1
 8002878:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800287c:	e00a      	b.n	8002894 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	b2da      	uxtb	r2, r3
 8002882:	4908      	ldr	r1, [pc, #32]	; (80028a4 <__NVIC_SetPriority+0x50>)
 8002884:	79fb      	ldrb	r3, [r7, #7]
 8002886:	f003 030f 	and.w	r3, r3, #15
 800288a:	3b04      	subs	r3, #4
 800288c:	0112      	lsls	r2, r2, #4
 800288e:	b2d2      	uxtb	r2, r2
 8002890:	440b      	add	r3, r1
 8002892:	761a      	strb	r2, [r3, #24]
}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr
 80028a0:	e000e100 	.word	0xe000e100
 80028a4:	e000ed00 	.word	0xe000ed00

080028a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b089      	sub	sp, #36	; 0x24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	f1c3 0307 	rsb	r3, r3, #7
 80028c2:	2b04      	cmp	r3, #4
 80028c4:	bf28      	it	cs
 80028c6:	2304      	movcs	r3, #4
 80028c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	3304      	adds	r3, #4
 80028ce:	2b06      	cmp	r3, #6
 80028d0:	d902      	bls.n	80028d8 <NVIC_EncodePriority+0x30>
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	3b03      	subs	r3, #3
 80028d6:	e000      	b.n	80028da <NVIC_EncodePriority+0x32>
 80028d8:	2300      	movs	r3, #0
 80028da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028dc:	f04f 32ff 	mov.w	r2, #4294967295
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	43da      	mvns	r2, r3
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	401a      	ands	r2, r3
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028f0:	f04f 31ff 	mov.w	r1, #4294967295
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	fa01 f303 	lsl.w	r3, r1, r3
 80028fa:	43d9      	mvns	r1, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002900:	4313      	orrs	r3, r2
         );
}
 8002902:	4618      	mov	r0, r3
 8002904:	3724      	adds	r7, #36	; 0x24
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
	...

08002910 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	3b01      	subs	r3, #1
 800291c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002920:	d301      	bcc.n	8002926 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002922:	2301      	movs	r3, #1
 8002924:	e00f      	b.n	8002946 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002926:	4a0a      	ldr	r2, [pc, #40]	; (8002950 <SysTick_Config+0x40>)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	3b01      	subs	r3, #1
 800292c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800292e:	210f      	movs	r1, #15
 8002930:	f04f 30ff 	mov.w	r0, #4294967295
 8002934:	f7ff ff8e 	bl	8002854 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002938:	4b05      	ldr	r3, [pc, #20]	; (8002950 <SysTick_Config+0x40>)
 800293a:	2200      	movs	r2, #0
 800293c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800293e:	4b04      	ldr	r3, [pc, #16]	; (8002950 <SysTick_Config+0x40>)
 8002940:	2207      	movs	r2, #7
 8002942:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	e000e010 	.word	0xe000e010

08002954 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f7ff ff29 	bl	80027b4 <__NVIC_SetPriorityGrouping>
}
 8002962:	bf00      	nop
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b086      	sub	sp, #24
 800296e:	af00      	add	r7, sp, #0
 8002970:	4603      	mov	r3, r0
 8002972:	60b9      	str	r1, [r7, #8]
 8002974:	607a      	str	r2, [r7, #4]
 8002976:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002978:	f7ff ff40 	bl	80027fc <__NVIC_GetPriorityGrouping>
 800297c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	68b9      	ldr	r1, [r7, #8]
 8002982:	6978      	ldr	r0, [r7, #20]
 8002984:	f7ff ff90 	bl	80028a8 <NVIC_EncodePriority>
 8002988:	4602      	mov	r2, r0
 800298a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800298e:	4611      	mov	r1, r2
 8002990:	4618      	mov	r0, r3
 8002992:	f7ff ff5f 	bl	8002854 <__NVIC_SetPriority>
}
 8002996:	bf00      	nop
 8002998:	3718      	adds	r7, #24
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b082      	sub	sp, #8
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	4603      	mov	r3, r0
 80029a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff ff33 	bl	8002818 <__NVIC_EnableIRQ>
}
 80029b2:	bf00      	nop
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b082      	sub	sp, #8
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f7ff ffa4 	bl	8002910 <SysTick_Config>
 80029c8:	4603      	mov	r3, r0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b082      	sub	sp, #8
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d101      	bne.n	80029e4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e014      	b.n	8002a0e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	791b      	ldrb	r3, [r3, #4]
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d105      	bne.n	80029fa <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f7fe fc3d 	bl	8001274 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2202      	movs	r2, #2
 80029fe:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b082      	sub	sp, #8
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
 8002a1e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	795b      	ldrb	r3, [r3, #5]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d101      	bne.n	8002a2c <HAL_DAC_Start+0x16>
 8002a28:	2302      	movs	r3, #2
 8002a2a:	e043      	b.n	8002ab4 <HAL_DAC_Start+0x9e>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2202      	movs	r2, #2
 8002a36:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	6819      	ldr	r1, [r3, #0]
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	f003 0310 	and.w	r3, r3, #16
 8002a44:	2201      	movs	r2, #1
 8002a46:	409a      	lsls	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8002a50:	2001      	movs	r0, #1
 8002a52:	f7fe fd83 	bl	800155c <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d10f      	bne.n	8002a7c <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d11d      	bne.n	8002aa6 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f042 0201 	orr.w	r2, r2, #1
 8002a78:	605a      	str	r2, [r3, #4]
 8002a7a:	e014      	b.n	8002aa6 <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	f003 0310 	and.w	r3, r3, #16
 8002a8c:	2102      	movs	r1, #2
 8002a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d107      	bne.n	8002aa6 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f042 0202 	orr.w	r2, r2, #2
 8002aa4:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3708      	adds	r7, #8
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b087      	sub	sp, #28
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
 8002ac8:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002aca:	2300      	movs	r3, #0
 8002acc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d105      	bne.n	8002aec <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	3308      	adds	r3, #8
 8002ae8:	617b      	str	r3, [r7, #20]
 8002aea:	e004      	b.n	8002af6 <HAL_DAC_SetValue+0x3a>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4413      	add	r3, r2
 8002af2:	3314      	adds	r3, #20
 8002af4:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	461a      	mov	r2, r3
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	371c      	adds	r7, #28
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b08a      	sub	sp, #40	; 0x28
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	795b      	ldrb	r3, [r3, #5]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d101      	bne.n	8002b24 <HAL_DAC_ConfigChannel+0x18>
 8002b20:	2302      	movs	r3, #2
 8002b22:	e192      	b.n	8002e4a <HAL_DAC_ConfigChannel+0x33e>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2201      	movs	r2, #1
 8002b28:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2202      	movs	r2, #2
 8002b2e:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	2b04      	cmp	r3, #4
 8002b36:	d174      	bne.n	8002c22 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002b38:	f7fe fd04 	bl	8001544 <HAL_GetTick>
 8002b3c:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d134      	bne.n	8002bae <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002b44:	e011      	b.n	8002b6a <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002b46:	f7fe fcfd 	bl	8001544 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d90a      	bls.n	8002b6a <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	f043 0208 	orr.w	r2, r3, #8
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2203      	movs	r2, #3
 8002b64:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e16f      	b.n	8002e4a <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1e6      	bne.n	8002b46 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8002b78:	2001      	movs	r0, #1
 8002b7a:	f7fe fcef 	bl	800155c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68ba      	ldr	r2, [r7, #8]
 8002b84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b86:	641a      	str	r2, [r3, #64]	; 0x40
 8002b88:	e01e      	b.n	8002bc8 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002b8a:	f7fe fcdb 	bl	8001544 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d90a      	bls.n	8002bae <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	f043 0208 	orr.w	r2, r3, #8
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2203      	movs	r2, #3
 8002ba8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e14d      	b.n	8002e4a <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	dbe8      	blt.n	8002b8a <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8002bb8:	2001      	movs	r0, #1
 8002bba:	f7fe fccf 	bl	800155c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68ba      	ldr	r2, [r7, #8]
 8002bc4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bc6:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f003 0310 	and.w	r3, r3, #16
 8002bd4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	ea02 0103 	and.w	r1, r2, r3
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f003 0310 	and.w	r3, r3, #16
 8002bec:	409a      	lsls	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f003 0310 	and.w	r3, r3, #16
 8002c02:	21ff      	movs	r1, #255	; 0xff
 8002c04:	fa01 f303 	lsl.w	r3, r1, r3
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	ea02 0103 	and.w	r1, r2, r3
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f003 0310 	and.w	r3, r3, #16
 8002c18:	409a      	lsls	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	69db      	ldr	r3, [r3, #28]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d11d      	bne.n	8002c66 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c30:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f003 0310 	and.w	r3, r3, #16
 8002c38:	221f      	movs	r2, #31
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	43db      	mvns	r3, r3
 8002c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c42:	4013      	ands	r3, r2
 8002c44:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f003 0310 	and.w	r3, r3, #16
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c64:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c6c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f003 0310 	and.w	r3, r3, #16
 8002c74:	2207      	movs	r2, #7
 8002c76:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7a:	43db      	mvns	r3, r3
 8002c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c7e:	4013      	ands	r3, r2
 8002c80:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d102      	bne.n	8002c90 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	623b      	str	r3, [r7, #32]
 8002c8e:	e00f      	b.n	8002cb0 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d102      	bne.n	8002c9e <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	623b      	str	r3, [r7, #32]
 8002c9c:	e008      	b.n	8002cb0 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d102      	bne.n	8002cac <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	623b      	str	r3, [r7, #32]
 8002caa:	e001      	b.n	8002cb0 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002cac:	2300      	movs	r3, #0
 8002cae:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	689a      	ldr	r2, [r3, #8]
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	6a3a      	ldr	r2, [r7, #32]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f003 0310 	and.w	r3, r3, #16
 8002cc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cca:	fa02 f303 	lsl.w	r3, r2, r3
 8002cce:	43db      	mvns	r3, r3
 8002cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	791b      	ldrb	r3, [r3, #4]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d102      	bne.n	8002ce4 <HAL_DAC_ConfigChannel+0x1d8>
 8002cde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ce2:	e000      	b.n	8002ce6 <HAL_DAC_ConfigChannel+0x1da>
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f003 0310 	and.w	r3, r3, #16
 8002cf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfa:	43db      	mvns	r3, r3
 8002cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cfe:	4013      	ands	r3, r2
 8002d00:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	795b      	ldrb	r3, [r3, #5]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d102      	bne.n	8002d10 <HAL_DAC_ConfigChannel+0x204>
 8002d0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d0e:	e000      	b.n	8002d12 <HAL_DAC_ConfigChannel+0x206>
 8002d10:	2300      	movs	r3, #0
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8002d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002d1e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d114      	bne.n	8002d52 <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8002d28:	f000 ffc0 	bl	8003cac <HAL_RCC_GetHCLKFreq>
 8002d2c:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	4a48      	ldr	r2, [pc, #288]	; (8002e54 <HAL_DAC_ConfigChannel+0x348>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d904      	bls.n	8002d40 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8002d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d3e:	e00f      	b.n	8002d60 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	4a45      	ldr	r2, [pc, #276]	; (8002e58 <HAL_DAC_ConfigChannel+0x34c>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d90a      	bls.n	8002d5e <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8002d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d50:	e006      	b.n	8002d60 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d5c:	e000      	b.n	8002d60 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8002d5e:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f003 0310 	and.w	r3, r3, #16
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	6819      	ldr	r1, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f003 0310 	and.w	r3, r3, #16
 8002d86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8e:	43da      	mvns	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	400a      	ands	r2, r1
 8002d96:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f003 0310 	and.w	r3, r3, #16
 8002da6:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	43db      	mvns	r3, r3
 8002db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002db2:	4013      	ands	r3, r2
 8002db4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f003 0310 	and.w	r3, r3, #16
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dd4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6819      	ldr	r1, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f003 0310 	and.w	r3, r3, #16
 8002de2:	22c0      	movs	r2, #192	; 0xc0
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	43da      	mvns	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	400a      	ands	r2, r1
 8002df0:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	089b      	lsrs	r3, r3, #2
 8002df8:	f003 030f 	and.w	r3, r3, #15
 8002dfc:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	089b      	lsrs	r3, r3, #2
 8002e04:	021b      	lsls	r3, r3, #8
 8002e06:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f003 0310 	and.w	r3, r3, #16
 8002e1c:	f640 710f 	movw	r1, #3855	; 0xf0f
 8002e20:	fa01 f303 	lsl.w	r3, r1, r3
 8002e24:	43db      	mvns	r3, r3
 8002e26:	ea02 0103 	and.w	r1, r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f003 0310 	and.w	r3, r3, #16
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	409a      	lsls	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3728      	adds	r7, #40	; 0x28
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	09896800 	.word	0x09896800
 8002e58:	04c4b400 	.word	0x04c4b400

08002e5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b087      	sub	sp, #28
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002e66:	2300      	movs	r3, #0
 8002e68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002e6a:	e15a      	b.n	8003122 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	2101      	movs	r1, #1
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	fa01 f303 	lsl.w	r3, r1, r3
 8002e78:	4013      	ands	r3, r2
 8002e7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f000 814c 	beq.w	800311c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f003 0303 	and.w	r3, r3, #3
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d005      	beq.n	8002e9c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d130      	bne.n	8002efe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	2203      	movs	r2, #3
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	43db      	mvns	r3, r3
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	68da      	ldr	r2, [r3, #12]
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	005b      	lsls	r3, r3, #1
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	43db      	mvns	r3, r3
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	091b      	lsrs	r3, r3, #4
 8002ee8:	f003 0201 	and.w	r2, r3, #1
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f003 0303 	and.w	r3, r3, #3
 8002f06:	2b03      	cmp	r3, #3
 8002f08:	d017      	beq.n	8002f3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	2203      	movs	r2, #3
 8002f16:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1a:	43db      	mvns	r3, r3
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	4013      	ands	r3, r2
 8002f20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f003 0303 	and.w	r3, r3, #3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d123      	bne.n	8002f8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	08da      	lsrs	r2, r3, #3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	3208      	adds	r2, #8
 8002f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	f003 0307 	and.w	r3, r3, #7
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	220f      	movs	r2, #15
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	43db      	mvns	r3, r3
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	4013      	ands	r3, r2
 8002f68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	691a      	ldr	r2, [r3, #16]
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	f003 0307 	and.w	r3, r3, #7
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	08da      	lsrs	r2, r3, #3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	3208      	adds	r2, #8
 8002f88:	6939      	ldr	r1, [r7, #16]
 8002f8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	2203      	movs	r2, #3
 8002f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9e:	43db      	mvns	r3, r3
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f003 0203 	and.w	r2, r3, #3
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	693a      	ldr	r2, [r7, #16]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f000 80a6 	beq.w	800311c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fd0:	4b5b      	ldr	r3, [pc, #364]	; (8003140 <HAL_GPIO_Init+0x2e4>)
 8002fd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fd4:	4a5a      	ldr	r2, [pc, #360]	; (8003140 <HAL_GPIO_Init+0x2e4>)
 8002fd6:	f043 0301 	orr.w	r3, r3, #1
 8002fda:	6613      	str	r3, [r2, #96]	; 0x60
 8002fdc:	4b58      	ldr	r3, [pc, #352]	; (8003140 <HAL_GPIO_Init+0x2e4>)
 8002fde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	60bb      	str	r3, [r7, #8]
 8002fe6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fe8:	4a56      	ldr	r2, [pc, #344]	; (8003144 <HAL_GPIO_Init+0x2e8>)
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	089b      	lsrs	r3, r3, #2
 8002fee:	3302      	adds	r3, #2
 8002ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	f003 0303 	and.w	r3, r3, #3
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	220f      	movs	r2, #15
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	43db      	mvns	r3, r3
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	4013      	ands	r3, r2
 800300a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003012:	d01f      	beq.n	8003054 <HAL_GPIO_Init+0x1f8>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4a4c      	ldr	r2, [pc, #304]	; (8003148 <HAL_GPIO_Init+0x2ec>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d019      	beq.n	8003050 <HAL_GPIO_Init+0x1f4>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a4b      	ldr	r2, [pc, #300]	; (800314c <HAL_GPIO_Init+0x2f0>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d013      	beq.n	800304c <HAL_GPIO_Init+0x1f0>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a4a      	ldr	r2, [pc, #296]	; (8003150 <HAL_GPIO_Init+0x2f4>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d00d      	beq.n	8003048 <HAL_GPIO_Init+0x1ec>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a49      	ldr	r2, [pc, #292]	; (8003154 <HAL_GPIO_Init+0x2f8>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d007      	beq.n	8003044 <HAL_GPIO_Init+0x1e8>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a48      	ldr	r2, [pc, #288]	; (8003158 <HAL_GPIO_Init+0x2fc>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d101      	bne.n	8003040 <HAL_GPIO_Init+0x1e4>
 800303c:	2305      	movs	r3, #5
 800303e:	e00a      	b.n	8003056 <HAL_GPIO_Init+0x1fa>
 8003040:	2306      	movs	r3, #6
 8003042:	e008      	b.n	8003056 <HAL_GPIO_Init+0x1fa>
 8003044:	2304      	movs	r3, #4
 8003046:	e006      	b.n	8003056 <HAL_GPIO_Init+0x1fa>
 8003048:	2303      	movs	r3, #3
 800304a:	e004      	b.n	8003056 <HAL_GPIO_Init+0x1fa>
 800304c:	2302      	movs	r3, #2
 800304e:	e002      	b.n	8003056 <HAL_GPIO_Init+0x1fa>
 8003050:	2301      	movs	r3, #1
 8003052:	e000      	b.n	8003056 <HAL_GPIO_Init+0x1fa>
 8003054:	2300      	movs	r3, #0
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	f002 0203 	and.w	r2, r2, #3
 800305c:	0092      	lsls	r2, r2, #2
 800305e:	4093      	lsls	r3, r2
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	4313      	orrs	r3, r2
 8003064:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003066:	4937      	ldr	r1, [pc, #220]	; (8003144 <HAL_GPIO_Init+0x2e8>)
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	089b      	lsrs	r3, r3, #2
 800306c:	3302      	adds	r3, #2
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003074:	4b39      	ldr	r3, [pc, #228]	; (800315c <HAL_GPIO_Init+0x300>)
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	43db      	mvns	r3, r3
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	4013      	ands	r3, r2
 8003082:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d003      	beq.n	8003098 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	4313      	orrs	r3, r2
 8003096:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003098:	4a30      	ldr	r2, [pc, #192]	; (800315c <HAL_GPIO_Init+0x300>)
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800309e:	4b2f      	ldr	r3, [pc, #188]	; (800315c <HAL_GPIO_Init+0x300>)
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	43db      	mvns	r3, r3
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	4013      	ands	r3, r2
 80030ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d003      	beq.n	80030c2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	4313      	orrs	r3, r2
 80030c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80030c2:	4a26      	ldr	r2, [pc, #152]	; (800315c <HAL_GPIO_Init+0x300>)
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80030c8:	4b24      	ldr	r3, [pc, #144]	; (800315c <HAL_GPIO_Init+0x300>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	43db      	mvns	r3, r3
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	4013      	ands	r3, r2
 80030d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d003      	beq.n	80030ec <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80030ec:	4a1b      	ldr	r2, [pc, #108]	; (800315c <HAL_GPIO_Init+0x300>)
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80030f2:	4b1a      	ldr	r3, [pc, #104]	; (800315c <HAL_GPIO_Init+0x300>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	43db      	mvns	r3, r3
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	4013      	ands	r3, r2
 8003100:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d003      	beq.n	8003116 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	4313      	orrs	r3, r2
 8003114:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003116:	4a11      	ldr	r2, [pc, #68]	; (800315c <HAL_GPIO_Init+0x300>)
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	3301      	adds	r3, #1
 8003120:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	fa22 f303 	lsr.w	r3, r2, r3
 800312c:	2b00      	cmp	r3, #0
 800312e:	f47f ae9d 	bne.w	8002e6c <HAL_GPIO_Init+0x10>
  }
}
 8003132:	bf00      	nop
 8003134:	bf00      	nop
 8003136:	371c      	adds	r7, #28
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr
 8003140:	40021000 	.word	0x40021000
 8003144:	40010000 	.word	0x40010000
 8003148:	48000400 	.word	0x48000400
 800314c:	48000800 	.word	0x48000800
 8003150:	48000c00 	.word	0x48000c00
 8003154:	48001000 	.word	0x48001000
 8003158:	48001400 	.word	0x48001400
 800315c:	40010400 	.word	0x40010400

08003160 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	460b      	mov	r3, r1
 800316a:	807b      	strh	r3, [r7, #2]
 800316c:	4613      	mov	r3, r2
 800316e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003170:	787b      	ldrb	r3, [r7, #1]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d003      	beq.n	800317e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003176:	887a      	ldrh	r2, [r7, #2]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800317c:	e002      	b.n	8003184 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800317e:	887a      	ldrh	r2, [r7, #2]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	4603      	mov	r3, r0
 8003198:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800319a:	4b08      	ldr	r3, [pc, #32]	; (80031bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800319c:	695a      	ldr	r2, [r3, #20]
 800319e:	88fb      	ldrh	r3, [r7, #6]
 80031a0:	4013      	ands	r3, r2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d006      	beq.n	80031b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031a6:	4a05      	ldr	r2, [pc, #20]	; (80031bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031a8:	88fb      	ldrh	r3, [r7, #6]
 80031aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031ac:	88fb      	ldrh	r3, [r7, #6]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f000 f806 	bl	80031c0 <HAL_GPIO_EXTI_Callback>
  }
}
 80031b4:	bf00      	nop
 80031b6:	3708      	adds	r7, #8
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	40010400 	.word	0x40010400

080031c0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	4603      	mov	r3, r0
 80031c8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80031ca:	bf00      	nop
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
	...

080031d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d141      	bne.n	800326a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80031e6:	4b4b      	ldr	r3, [pc, #300]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80031ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031f2:	d131      	bne.n	8003258 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031f4:	4b47      	ldr	r3, [pc, #284]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031fa:	4a46      	ldr	r2, [pc, #280]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003200:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003204:	4b43      	ldr	r3, [pc, #268]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800320c:	4a41      	ldr	r2, [pc, #260]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800320e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003212:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003214:	4b40      	ldr	r3, [pc, #256]	; (8003318 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2232      	movs	r2, #50	; 0x32
 800321a:	fb02 f303 	mul.w	r3, r2, r3
 800321e:	4a3f      	ldr	r2, [pc, #252]	; (800331c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003220:	fba2 2303 	umull	r2, r3, r2, r3
 8003224:	0c9b      	lsrs	r3, r3, #18
 8003226:	3301      	adds	r3, #1
 8003228:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800322a:	e002      	b.n	8003232 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	3b01      	subs	r3, #1
 8003230:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003232:	4b38      	ldr	r3, [pc, #224]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800323a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800323e:	d102      	bne.n	8003246 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1f2      	bne.n	800322c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003246:	4b33      	ldr	r3, [pc, #204]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800324e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003252:	d158      	bne.n	8003306 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e057      	b.n	8003308 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003258:	4b2e      	ldr	r3, [pc, #184]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800325a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800325e:	4a2d      	ldr	r2, [pc, #180]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003260:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003264:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003268:	e04d      	b.n	8003306 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003270:	d141      	bne.n	80032f6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003272:	4b28      	ldr	r3, [pc, #160]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800327a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800327e:	d131      	bne.n	80032e4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003280:	4b24      	ldr	r3, [pc, #144]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003282:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003286:	4a23      	ldr	r2, [pc, #140]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800328c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003290:	4b20      	ldr	r3, [pc, #128]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003298:	4a1e      	ldr	r2, [pc, #120]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800329a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800329e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032a0:	4b1d      	ldr	r3, [pc, #116]	; (8003318 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2232      	movs	r2, #50	; 0x32
 80032a6:	fb02 f303 	mul.w	r3, r2, r3
 80032aa:	4a1c      	ldr	r2, [pc, #112]	; (800331c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80032ac:	fba2 2303 	umull	r2, r3, r2, r3
 80032b0:	0c9b      	lsrs	r3, r3, #18
 80032b2:	3301      	adds	r3, #1
 80032b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032b6:	e002      	b.n	80032be <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	3b01      	subs	r3, #1
 80032bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032be:	4b15      	ldr	r3, [pc, #84]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032ca:	d102      	bne.n	80032d2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1f2      	bne.n	80032b8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032d2:	4b10      	ldr	r3, [pc, #64]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032de:	d112      	bne.n	8003306 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e011      	b.n	8003308 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032e4:	4b0b      	ldr	r3, [pc, #44]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032ea:	4a0a      	ldr	r2, [pc, #40]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80032f4:	e007      	b.n	8003306 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80032f6:	4b07      	ldr	r3, [pc, #28]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032fe:	4a05      	ldr	r2, [pc, #20]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003300:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003304:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3714      	adds	r7, #20
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr
 8003314:	40007000 	.word	0x40007000
 8003318:	20000000 	.word	0x20000000
 800331c:	431bde83 	.word	0x431bde83

08003320 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003324:	4b05      	ldr	r3, [pc, #20]	; (800333c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	4a04      	ldr	r2, [pc, #16]	; (800333c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800332a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800332e:	6093      	str	r3, [r2, #8]
}
 8003330:	bf00      	nop
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	40007000 	.word	0x40007000

08003340 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b088      	sub	sp, #32
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e306      	b.n	8003960 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b00      	cmp	r3, #0
 800335c:	d075      	beq.n	800344a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800335e:	4b97      	ldr	r3, [pc, #604]	; (80035bc <HAL_RCC_OscConfig+0x27c>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f003 030c 	and.w	r3, r3, #12
 8003366:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003368:	4b94      	ldr	r3, [pc, #592]	; (80035bc <HAL_RCC_OscConfig+0x27c>)
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	f003 0303 	and.w	r3, r3, #3
 8003370:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	2b0c      	cmp	r3, #12
 8003376:	d102      	bne.n	800337e <HAL_RCC_OscConfig+0x3e>
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	2b03      	cmp	r3, #3
 800337c:	d002      	beq.n	8003384 <HAL_RCC_OscConfig+0x44>
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	2b08      	cmp	r3, #8
 8003382:	d10b      	bne.n	800339c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003384:	4b8d      	ldr	r3, [pc, #564]	; (80035bc <HAL_RCC_OscConfig+0x27c>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d05b      	beq.n	8003448 <HAL_RCC_OscConfig+0x108>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d157      	bne.n	8003448 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e2e1      	b.n	8003960 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033a4:	d106      	bne.n	80033b4 <HAL_RCC_OscConfig+0x74>
 80033a6:	4b85      	ldr	r3, [pc, #532]	; (80035bc <HAL_RCC_OscConfig+0x27c>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a84      	ldr	r2, [pc, #528]	; (80035bc <HAL_RCC_OscConfig+0x27c>)
 80033ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b0:	6013      	str	r3, [r2, #0]
 80033b2:	e01d      	b.n	80033f0 <HAL_RCC_OscConfig+0xb0>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033bc:	d10c      	bne.n	80033d8 <HAL_RCC_OscConfig+0x98>
 80033be:	4b7f      	ldr	r3, [pc, #508]	; (80035bc <HAL_RCC_OscConfig+0x27c>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a7e      	ldr	r2, [pc, #504]	; (80035bc <HAL_RCC_OscConfig+0x27c>)
 80033c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033c8:	6013      	str	r3, [r2, #0]
 80033ca:	4b7c      	ldr	r3, [pc, #496]	; (80035bc <HAL_RCC_OscConfig+0x27c>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a7b      	ldr	r2, [pc, #492]	; (80035bc <HAL_RCC_OscConfig+0x27c>)
 80033d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033d4:	6013      	str	r3, [r2, #0]
 80033d6:	e00b      	b.n	80033f0 <HAL_RCC_OscConfig+0xb0>
 80033d8:	4b78      	ldr	r3, [pc, #480]	; (80035bc <HAL_RCC_OscConfig+0x27c>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a77      	ldr	r2, [pc, #476]	; (80035bc <HAL_RCC_OscConfig+0x27c>)
 80033de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033e2:	6013      	str	r3, [r2, #0]
 80033e4:	4b75      	ldr	r3, [pc, #468]	; (80035bc <HAL_RCC_OscConfig+0x27c>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a74      	ldr	r2, [pc, #464]	; (80035bc <HAL_RCC_OscConfig+0x27c>)
 80033ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d013      	beq.n	8003420 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f8:	f7fe f8a4 	bl	8001544 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003400:	f7fe f8a0 	bl	8001544 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b64      	cmp	r3, #100	; 0x64
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e2a6      	b.n	8003960 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003412:	4b6a      	ldr	r3, [pc, #424]	; (80035bc <HAL_RCC_OscConfig+0x27c>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d0f0      	beq.n	8003400 <HAL_RCC_OscConfig+0xc0>
 800341e:	e014      	b.n	800344a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003420:	f7fe f890 	bl	8001544 <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003426:	e008      	b.n	800343a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003428:	f7fe f88c 	bl	8001544 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b64      	cmp	r3, #100	; 0x64
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e292      	b.n	8003960 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800343a:	4b60      	ldr	r3, [pc, #384]	; (80035bc <HAL_RCC_OscConfig+0x27c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1f0      	bne.n	8003428 <HAL_RCC_OscConfig+0xe8>
 8003446:	e000      	b.n	800344a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003448:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d075      	beq.n	8003542 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003456:	4b59      	ldr	r3, [pc, #356]	; (80035bc <HAL_RCC_OscConfig+0x27c>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f003 030c 	and.w	r3, r3, #12
 800345e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003460:	4b56      	ldr	r3, [pc, #344]	; (80035bc <HAL_RCC_OscConfig+0x27c>)
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	f003 0303 	and.w	r3, r3, #3
 8003468:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	2b0c      	cmp	r3, #12
 800346e:	d102      	bne.n	8003476 <HAL_RCC_OscConfig+0x136>
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	2b02      	cmp	r3, #2
 8003474:	d002      	beq.n	800347c <HAL_RCC_OscConfig+0x13c>
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	2b04      	cmp	r3, #4
 800347a:	d11f      	bne.n	80034bc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800347c:	4b4f      	ldr	r3, [pc, #316]	; (80035bc <HAL_RCC_OscConfig+0x27c>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003484:	2b00      	cmp	r3, #0
 8003486:	d005      	beq.n	8003494 <HAL_RCC_OscConfig+0x154>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d101      	bne.n	8003494 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e265      	b.n	8003960 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003494:	4b49      	ldr	r3, [pc, #292]	; (80035bc <HAL_RCC_OscConfig+0x27c>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	061b      	lsls	r3, r3, #24
 80034a2:	4946      	ldr	r1, [pc, #280]	; (80035bc <HAL_RCC_OscConfig+0x27c>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80034a8:	4b45      	ldr	r3, [pc, #276]	; (80035c0 <HAL_RCC_OscConfig+0x280>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7fd fffd 	bl	80014ac <HAL_InitTick>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d043      	beq.n	8003540 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e251      	b.n	8003960 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d023      	beq.n	800350c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034c4:	4b3d      	ldr	r3, [pc, #244]	; (80035bc <HAL_RCC_OscConfig+0x27c>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a3c      	ldr	r2, [pc, #240]	; (80035bc <HAL_RCC_OscConfig+0x27c>)
 80034ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d0:	f7fe f838 	bl	8001544 <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034d6:	e008      	b.n	80034ea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034d8:	f7fe f834 	bl	8001544 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e23a      	b.n	8003960 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034ea:	4b34      	ldr	r3, [pc, #208]	; (80035bc <HAL_RCC_OscConfig+0x27c>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d0f0      	beq.n	80034d8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034f6:	4b31      	ldr	r3, [pc, #196]	; (80035bc <HAL_RCC_OscConfig+0x27c>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	061b      	lsls	r3, r3, #24
 8003504:	492d      	ldr	r1, [pc, #180]	; (80035bc <HAL_RCC_OscConfig+0x27c>)
 8003506:	4313      	orrs	r3, r2
 8003508:	604b      	str	r3, [r1, #4]
 800350a:	e01a      	b.n	8003542 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800350c:	4b2b      	ldr	r3, [pc, #172]	; (80035bc <HAL_RCC_OscConfig+0x27c>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a2a      	ldr	r2, [pc, #168]	; (80035bc <HAL_RCC_OscConfig+0x27c>)
 8003512:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003516:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003518:	f7fe f814 	bl	8001544 <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003520:	f7fe f810 	bl	8001544 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e216      	b.n	8003960 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003532:	4b22      	ldr	r3, [pc, #136]	; (80035bc <HAL_RCC_OscConfig+0x27c>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1f0      	bne.n	8003520 <HAL_RCC_OscConfig+0x1e0>
 800353e:	e000      	b.n	8003542 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003540:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0308 	and.w	r3, r3, #8
 800354a:	2b00      	cmp	r3, #0
 800354c:	d041      	beq.n	80035d2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d01c      	beq.n	8003590 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003556:	4b19      	ldr	r3, [pc, #100]	; (80035bc <HAL_RCC_OscConfig+0x27c>)
 8003558:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800355c:	4a17      	ldr	r2, [pc, #92]	; (80035bc <HAL_RCC_OscConfig+0x27c>)
 800355e:	f043 0301 	orr.w	r3, r3, #1
 8003562:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003566:	f7fd ffed 	bl	8001544 <HAL_GetTick>
 800356a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800356c:	e008      	b.n	8003580 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800356e:	f7fd ffe9 	bl	8001544 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d901      	bls.n	8003580 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e1ef      	b.n	8003960 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003580:	4b0e      	ldr	r3, [pc, #56]	; (80035bc <HAL_RCC_OscConfig+0x27c>)
 8003582:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d0ef      	beq.n	800356e <HAL_RCC_OscConfig+0x22e>
 800358e:	e020      	b.n	80035d2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003590:	4b0a      	ldr	r3, [pc, #40]	; (80035bc <HAL_RCC_OscConfig+0x27c>)
 8003592:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003596:	4a09      	ldr	r2, [pc, #36]	; (80035bc <HAL_RCC_OscConfig+0x27c>)
 8003598:	f023 0301 	bic.w	r3, r3, #1
 800359c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a0:	f7fd ffd0 	bl	8001544 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035a6:	e00d      	b.n	80035c4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035a8:	f7fd ffcc 	bl	8001544 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d906      	bls.n	80035c4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e1d2      	b.n	8003960 <HAL_RCC_OscConfig+0x620>
 80035ba:	bf00      	nop
 80035bc:	40021000 	.word	0x40021000
 80035c0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035c4:	4b8c      	ldr	r3, [pc, #560]	; (80037f8 <HAL_RCC_OscConfig+0x4b8>)
 80035c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1ea      	bne.n	80035a8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0304 	and.w	r3, r3, #4
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f000 80a6 	beq.w	800372c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035e0:	2300      	movs	r3, #0
 80035e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80035e4:	4b84      	ldr	r3, [pc, #528]	; (80037f8 <HAL_RCC_OscConfig+0x4b8>)
 80035e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d101      	bne.n	80035f4 <HAL_RCC_OscConfig+0x2b4>
 80035f0:	2301      	movs	r3, #1
 80035f2:	e000      	b.n	80035f6 <HAL_RCC_OscConfig+0x2b6>
 80035f4:	2300      	movs	r3, #0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00d      	beq.n	8003616 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035fa:	4b7f      	ldr	r3, [pc, #508]	; (80037f8 <HAL_RCC_OscConfig+0x4b8>)
 80035fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035fe:	4a7e      	ldr	r2, [pc, #504]	; (80037f8 <HAL_RCC_OscConfig+0x4b8>)
 8003600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003604:	6593      	str	r3, [r2, #88]	; 0x58
 8003606:	4b7c      	ldr	r3, [pc, #496]	; (80037f8 <HAL_RCC_OscConfig+0x4b8>)
 8003608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800360a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800360e:	60fb      	str	r3, [r7, #12]
 8003610:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003612:	2301      	movs	r3, #1
 8003614:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003616:	4b79      	ldr	r3, [pc, #484]	; (80037fc <HAL_RCC_OscConfig+0x4bc>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800361e:	2b00      	cmp	r3, #0
 8003620:	d118      	bne.n	8003654 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003622:	4b76      	ldr	r3, [pc, #472]	; (80037fc <HAL_RCC_OscConfig+0x4bc>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a75      	ldr	r2, [pc, #468]	; (80037fc <HAL_RCC_OscConfig+0x4bc>)
 8003628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800362c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800362e:	f7fd ff89 	bl	8001544 <HAL_GetTick>
 8003632:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003634:	e008      	b.n	8003648 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003636:	f7fd ff85 	bl	8001544 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d901      	bls.n	8003648 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e18b      	b.n	8003960 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003648:	4b6c      	ldr	r3, [pc, #432]	; (80037fc <HAL_RCC_OscConfig+0x4bc>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003650:	2b00      	cmp	r3, #0
 8003652:	d0f0      	beq.n	8003636 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d108      	bne.n	800366e <HAL_RCC_OscConfig+0x32e>
 800365c:	4b66      	ldr	r3, [pc, #408]	; (80037f8 <HAL_RCC_OscConfig+0x4b8>)
 800365e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003662:	4a65      	ldr	r2, [pc, #404]	; (80037f8 <HAL_RCC_OscConfig+0x4b8>)
 8003664:	f043 0301 	orr.w	r3, r3, #1
 8003668:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800366c:	e024      	b.n	80036b8 <HAL_RCC_OscConfig+0x378>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	2b05      	cmp	r3, #5
 8003674:	d110      	bne.n	8003698 <HAL_RCC_OscConfig+0x358>
 8003676:	4b60      	ldr	r3, [pc, #384]	; (80037f8 <HAL_RCC_OscConfig+0x4b8>)
 8003678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800367c:	4a5e      	ldr	r2, [pc, #376]	; (80037f8 <HAL_RCC_OscConfig+0x4b8>)
 800367e:	f043 0304 	orr.w	r3, r3, #4
 8003682:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003686:	4b5c      	ldr	r3, [pc, #368]	; (80037f8 <HAL_RCC_OscConfig+0x4b8>)
 8003688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800368c:	4a5a      	ldr	r2, [pc, #360]	; (80037f8 <HAL_RCC_OscConfig+0x4b8>)
 800368e:	f043 0301 	orr.w	r3, r3, #1
 8003692:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003696:	e00f      	b.n	80036b8 <HAL_RCC_OscConfig+0x378>
 8003698:	4b57      	ldr	r3, [pc, #348]	; (80037f8 <HAL_RCC_OscConfig+0x4b8>)
 800369a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800369e:	4a56      	ldr	r2, [pc, #344]	; (80037f8 <HAL_RCC_OscConfig+0x4b8>)
 80036a0:	f023 0301 	bic.w	r3, r3, #1
 80036a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036a8:	4b53      	ldr	r3, [pc, #332]	; (80037f8 <HAL_RCC_OscConfig+0x4b8>)
 80036aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ae:	4a52      	ldr	r2, [pc, #328]	; (80037f8 <HAL_RCC_OscConfig+0x4b8>)
 80036b0:	f023 0304 	bic.w	r3, r3, #4
 80036b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d016      	beq.n	80036ee <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c0:	f7fd ff40 	bl	8001544 <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036c6:	e00a      	b.n	80036de <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036c8:	f7fd ff3c 	bl	8001544 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e140      	b.n	8003960 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036de:	4b46      	ldr	r3, [pc, #280]	; (80037f8 <HAL_RCC_OscConfig+0x4b8>)
 80036e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d0ed      	beq.n	80036c8 <HAL_RCC_OscConfig+0x388>
 80036ec:	e015      	b.n	800371a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ee:	f7fd ff29 	bl	8001544 <HAL_GetTick>
 80036f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036f4:	e00a      	b.n	800370c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036f6:	f7fd ff25 	bl	8001544 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	f241 3288 	movw	r2, #5000	; 0x1388
 8003704:	4293      	cmp	r3, r2
 8003706:	d901      	bls.n	800370c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e129      	b.n	8003960 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800370c:	4b3a      	ldr	r3, [pc, #232]	; (80037f8 <HAL_RCC_OscConfig+0x4b8>)
 800370e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1ed      	bne.n	80036f6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800371a:	7ffb      	ldrb	r3, [r7, #31]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d105      	bne.n	800372c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003720:	4b35      	ldr	r3, [pc, #212]	; (80037f8 <HAL_RCC_OscConfig+0x4b8>)
 8003722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003724:	4a34      	ldr	r2, [pc, #208]	; (80037f8 <HAL_RCC_OscConfig+0x4b8>)
 8003726:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800372a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0320 	and.w	r3, r3, #32
 8003734:	2b00      	cmp	r3, #0
 8003736:	d03c      	beq.n	80037b2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d01c      	beq.n	800377a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003740:	4b2d      	ldr	r3, [pc, #180]	; (80037f8 <HAL_RCC_OscConfig+0x4b8>)
 8003742:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003746:	4a2c      	ldr	r2, [pc, #176]	; (80037f8 <HAL_RCC_OscConfig+0x4b8>)
 8003748:	f043 0301 	orr.w	r3, r3, #1
 800374c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003750:	f7fd fef8 	bl	8001544 <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003758:	f7fd fef4 	bl	8001544 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e0fa      	b.n	8003960 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800376a:	4b23      	ldr	r3, [pc, #140]	; (80037f8 <HAL_RCC_OscConfig+0x4b8>)
 800376c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d0ef      	beq.n	8003758 <HAL_RCC_OscConfig+0x418>
 8003778:	e01b      	b.n	80037b2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800377a:	4b1f      	ldr	r3, [pc, #124]	; (80037f8 <HAL_RCC_OscConfig+0x4b8>)
 800377c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003780:	4a1d      	ldr	r2, [pc, #116]	; (80037f8 <HAL_RCC_OscConfig+0x4b8>)
 8003782:	f023 0301 	bic.w	r3, r3, #1
 8003786:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800378a:	f7fd fedb 	bl	8001544 <HAL_GetTick>
 800378e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003790:	e008      	b.n	80037a4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003792:	f7fd fed7 	bl	8001544 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b02      	cmp	r3, #2
 800379e:	d901      	bls.n	80037a4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e0dd      	b.n	8003960 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037a4:	4b14      	ldr	r3, [pc, #80]	; (80037f8 <HAL_RCC_OscConfig+0x4b8>)
 80037a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1ef      	bne.n	8003792 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	69db      	ldr	r3, [r3, #28]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f000 80d1 	beq.w	800395e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037bc:	4b0e      	ldr	r3, [pc, #56]	; (80037f8 <HAL_RCC_OscConfig+0x4b8>)
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f003 030c 	and.w	r3, r3, #12
 80037c4:	2b0c      	cmp	r3, #12
 80037c6:	f000 808b 	beq.w	80038e0 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	69db      	ldr	r3, [r3, #28]
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d15e      	bne.n	8003890 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037d2:	4b09      	ldr	r3, [pc, #36]	; (80037f8 <HAL_RCC_OscConfig+0x4b8>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a08      	ldr	r2, [pc, #32]	; (80037f8 <HAL_RCC_OscConfig+0x4b8>)
 80037d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037de:	f7fd feb1 	bl	8001544 <HAL_GetTick>
 80037e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037e4:	e00c      	b.n	8003800 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037e6:	f7fd fead 	bl	8001544 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d905      	bls.n	8003800 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e0b3      	b.n	8003960 <HAL_RCC_OscConfig+0x620>
 80037f8:	40021000 	.word	0x40021000
 80037fc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003800:	4b59      	ldr	r3, [pc, #356]	; (8003968 <HAL_RCC_OscConfig+0x628>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1ec      	bne.n	80037e6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800380c:	4b56      	ldr	r3, [pc, #344]	; (8003968 <HAL_RCC_OscConfig+0x628>)
 800380e:	68da      	ldr	r2, [r3, #12]
 8003810:	4b56      	ldr	r3, [pc, #344]	; (800396c <HAL_RCC_OscConfig+0x62c>)
 8003812:	4013      	ands	r3, r2
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	6a11      	ldr	r1, [r2, #32]
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800381c:	3a01      	subs	r2, #1
 800381e:	0112      	lsls	r2, r2, #4
 8003820:	4311      	orrs	r1, r2
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003826:	0212      	lsls	r2, r2, #8
 8003828:	4311      	orrs	r1, r2
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800382e:	0852      	lsrs	r2, r2, #1
 8003830:	3a01      	subs	r2, #1
 8003832:	0552      	lsls	r2, r2, #21
 8003834:	4311      	orrs	r1, r2
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800383a:	0852      	lsrs	r2, r2, #1
 800383c:	3a01      	subs	r2, #1
 800383e:	0652      	lsls	r2, r2, #25
 8003840:	4311      	orrs	r1, r2
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003846:	06d2      	lsls	r2, r2, #27
 8003848:	430a      	orrs	r2, r1
 800384a:	4947      	ldr	r1, [pc, #284]	; (8003968 <HAL_RCC_OscConfig+0x628>)
 800384c:	4313      	orrs	r3, r2
 800384e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003850:	4b45      	ldr	r3, [pc, #276]	; (8003968 <HAL_RCC_OscConfig+0x628>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a44      	ldr	r2, [pc, #272]	; (8003968 <HAL_RCC_OscConfig+0x628>)
 8003856:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800385a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800385c:	4b42      	ldr	r3, [pc, #264]	; (8003968 <HAL_RCC_OscConfig+0x628>)
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	4a41      	ldr	r2, [pc, #260]	; (8003968 <HAL_RCC_OscConfig+0x628>)
 8003862:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003866:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003868:	f7fd fe6c 	bl	8001544 <HAL_GetTick>
 800386c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800386e:	e008      	b.n	8003882 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003870:	f7fd fe68 	bl	8001544 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b02      	cmp	r3, #2
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e06e      	b.n	8003960 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003882:	4b39      	ldr	r3, [pc, #228]	; (8003968 <HAL_RCC_OscConfig+0x628>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d0f0      	beq.n	8003870 <HAL_RCC_OscConfig+0x530>
 800388e:	e066      	b.n	800395e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003890:	4b35      	ldr	r3, [pc, #212]	; (8003968 <HAL_RCC_OscConfig+0x628>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a34      	ldr	r2, [pc, #208]	; (8003968 <HAL_RCC_OscConfig+0x628>)
 8003896:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800389a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800389c:	4b32      	ldr	r3, [pc, #200]	; (8003968 <HAL_RCC_OscConfig+0x628>)
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	4a31      	ldr	r2, [pc, #196]	; (8003968 <HAL_RCC_OscConfig+0x628>)
 80038a2:	f023 0303 	bic.w	r3, r3, #3
 80038a6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80038a8:	4b2f      	ldr	r3, [pc, #188]	; (8003968 <HAL_RCC_OscConfig+0x628>)
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	4a2e      	ldr	r2, [pc, #184]	; (8003968 <HAL_RCC_OscConfig+0x628>)
 80038ae:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80038b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038b6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b8:	f7fd fe44 	bl	8001544 <HAL_GetTick>
 80038bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038be:	e008      	b.n	80038d2 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038c0:	f7fd fe40 	bl	8001544 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e046      	b.n	8003960 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038d2:	4b25      	ldr	r3, [pc, #148]	; (8003968 <HAL_RCC_OscConfig+0x628>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1f0      	bne.n	80038c0 <HAL_RCC_OscConfig+0x580>
 80038de:	e03e      	b.n	800395e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	69db      	ldr	r3, [r3, #28]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d101      	bne.n	80038ec <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e039      	b.n	8003960 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80038ec:	4b1e      	ldr	r3, [pc, #120]	; (8003968 <HAL_RCC_OscConfig+0x628>)
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	f003 0203 	and.w	r2, r3, #3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d12c      	bne.n	800395a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	3b01      	subs	r3, #1
 800390c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800390e:	429a      	cmp	r2, r3
 8003910:	d123      	bne.n	800395a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800391e:	429a      	cmp	r2, r3
 8003920:	d11b      	bne.n	800395a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800392e:	429a      	cmp	r2, r3
 8003930:	d113      	bne.n	800395a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393c:	085b      	lsrs	r3, r3, #1
 800393e:	3b01      	subs	r3, #1
 8003940:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003942:	429a      	cmp	r2, r3
 8003944:	d109      	bne.n	800395a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003950:	085b      	lsrs	r3, r3, #1
 8003952:	3b01      	subs	r3, #1
 8003954:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003956:	429a      	cmp	r2, r3
 8003958:	d001      	beq.n	800395e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e000      	b.n	8003960 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3720      	adds	r7, #32
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	40021000 	.word	0x40021000
 800396c:	019f800c 	.word	0x019f800c

08003970 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800397a:	2300      	movs	r3, #0
 800397c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d101      	bne.n	8003988 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e11e      	b.n	8003bc6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003988:	4b91      	ldr	r3, [pc, #580]	; (8003bd0 <HAL_RCC_ClockConfig+0x260>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 030f 	and.w	r3, r3, #15
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	429a      	cmp	r2, r3
 8003994:	d910      	bls.n	80039b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003996:	4b8e      	ldr	r3, [pc, #568]	; (8003bd0 <HAL_RCC_ClockConfig+0x260>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f023 020f 	bic.w	r2, r3, #15
 800399e:	498c      	ldr	r1, [pc, #560]	; (8003bd0 <HAL_RCC_ClockConfig+0x260>)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039a6:	4b8a      	ldr	r3, [pc, #552]	; (8003bd0 <HAL_RCC_ClockConfig+0x260>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 030f 	and.w	r3, r3, #15
 80039ae:	683a      	ldr	r2, [r7, #0]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d001      	beq.n	80039b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e106      	b.n	8003bc6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d073      	beq.n	8003aac <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	2b03      	cmp	r3, #3
 80039ca:	d129      	bne.n	8003a20 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039cc:	4b81      	ldr	r3, [pc, #516]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d101      	bne.n	80039dc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e0f4      	b.n	8003bc6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80039dc:	f000 f99e 	bl	8003d1c <RCC_GetSysClockFreqFromPLLSource>
 80039e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	4a7c      	ldr	r2, [pc, #496]	; (8003bd8 <HAL_RCC_ClockConfig+0x268>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d93f      	bls.n	8003a6a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80039ea:	4b7a      	ldr	r3, [pc, #488]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d009      	beq.n	8003a0a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d033      	beq.n	8003a6a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d12f      	bne.n	8003a6a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a0a:	4b72      	ldr	r3, [pc, #456]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a12:	4a70      	ldr	r2, [pc, #448]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a18:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003a1a:	2380      	movs	r3, #128	; 0x80
 8003a1c:	617b      	str	r3, [r7, #20]
 8003a1e:	e024      	b.n	8003a6a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d107      	bne.n	8003a38 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a28:	4b6a      	ldr	r3, [pc, #424]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d109      	bne.n	8003a48 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e0c6      	b.n	8003bc6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a38:	4b66      	ldr	r3, [pc, #408]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d101      	bne.n	8003a48 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e0be      	b.n	8003bc6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003a48:	f000 f8ce 	bl	8003be8 <HAL_RCC_GetSysClockFreq>
 8003a4c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	4a61      	ldr	r2, [pc, #388]	; (8003bd8 <HAL_RCC_ClockConfig+0x268>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d909      	bls.n	8003a6a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a56:	4b5f      	ldr	r3, [pc, #380]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a5e:	4a5d      	ldr	r2, [pc, #372]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a64:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003a66:	2380      	movs	r3, #128	; 0x80
 8003a68:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a6a:	4b5a      	ldr	r3, [pc, #360]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f023 0203 	bic.w	r2, r3, #3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	4957      	ldr	r1, [pc, #348]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a7c:	f7fd fd62 	bl	8001544 <HAL_GetTick>
 8003a80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a82:	e00a      	b.n	8003a9a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a84:	f7fd fd5e 	bl	8001544 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e095      	b.n	8003bc6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a9a:	4b4e      	ldr	r3, [pc, #312]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f003 020c 	and.w	r2, r3, #12
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d1eb      	bne.n	8003a84 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d023      	beq.n	8003b00 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0304 	and.w	r3, r3, #4
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d005      	beq.n	8003ad0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ac4:	4b43      	ldr	r3, [pc, #268]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	4a42      	ldr	r2, [pc, #264]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003aca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ace:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0308 	and.w	r3, r3, #8
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d007      	beq.n	8003aec <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003adc:	4b3d      	ldr	r3, [pc, #244]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003ae4:	4a3b      	ldr	r2, [pc, #236]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003ae6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003aea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003aec:	4b39      	ldr	r3, [pc, #228]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	4936      	ldr	r1, [pc, #216]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	608b      	str	r3, [r1, #8]
 8003afe:	e008      	b.n	8003b12 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	2b80      	cmp	r3, #128	; 0x80
 8003b04:	d105      	bne.n	8003b12 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003b06:	4b33      	ldr	r3, [pc, #204]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	4a32      	ldr	r2, [pc, #200]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003b0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b10:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b12:	4b2f      	ldr	r3, [pc, #188]	; (8003bd0 <HAL_RCC_ClockConfig+0x260>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 030f 	and.w	r3, r3, #15
 8003b1a:	683a      	ldr	r2, [r7, #0]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d21d      	bcs.n	8003b5c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b20:	4b2b      	ldr	r3, [pc, #172]	; (8003bd0 <HAL_RCC_ClockConfig+0x260>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f023 020f 	bic.w	r2, r3, #15
 8003b28:	4929      	ldr	r1, [pc, #164]	; (8003bd0 <HAL_RCC_ClockConfig+0x260>)
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003b30:	f7fd fd08 	bl	8001544 <HAL_GetTick>
 8003b34:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b36:	e00a      	b.n	8003b4e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b38:	f7fd fd04 	bl	8001544 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e03b      	b.n	8003bc6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b4e:	4b20      	ldr	r3, [pc, #128]	; (8003bd0 <HAL_RCC_ClockConfig+0x260>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 030f 	and.w	r3, r3, #15
 8003b56:	683a      	ldr	r2, [r7, #0]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d1ed      	bne.n	8003b38 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0304 	and.w	r3, r3, #4
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d008      	beq.n	8003b7a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b68:	4b1a      	ldr	r3, [pc, #104]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	4917      	ldr	r1, [pc, #92]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0308 	and.w	r3, r3, #8
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d009      	beq.n	8003b9a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b86:	4b13      	ldr	r3, [pc, #76]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	490f      	ldr	r1, [pc, #60]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b9a:	f000 f825 	bl	8003be8 <HAL_RCC_GetSysClockFreq>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	4b0c      	ldr	r3, [pc, #48]	; (8003bd4 <HAL_RCC_ClockConfig+0x264>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	091b      	lsrs	r3, r3, #4
 8003ba6:	f003 030f 	and.w	r3, r3, #15
 8003baa:	490c      	ldr	r1, [pc, #48]	; (8003bdc <HAL_RCC_ClockConfig+0x26c>)
 8003bac:	5ccb      	ldrb	r3, [r1, r3]
 8003bae:	f003 031f 	and.w	r3, r3, #31
 8003bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8003bb6:	4a0a      	ldr	r2, [pc, #40]	; (8003be0 <HAL_RCC_ClockConfig+0x270>)
 8003bb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003bba:	4b0a      	ldr	r3, [pc, #40]	; (8003be4 <HAL_RCC_ClockConfig+0x274>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7fd fc74 	bl	80014ac <HAL_InitTick>
 8003bc4:	4603      	mov	r3, r0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3718      	adds	r7, #24
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	40022000 	.word	0x40022000
 8003bd4:	40021000 	.word	0x40021000
 8003bd8:	04c4b400 	.word	0x04c4b400
 8003bdc:	08004ebc 	.word	0x08004ebc
 8003be0:	20000000 	.word	0x20000000
 8003be4:	20000004 	.word	0x20000004

08003be8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b087      	sub	sp, #28
 8003bec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003bee:	4b2c      	ldr	r3, [pc, #176]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f003 030c 	and.w	r3, r3, #12
 8003bf6:	2b04      	cmp	r3, #4
 8003bf8:	d102      	bne.n	8003c00 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003bfa:	4b2a      	ldr	r3, [pc, #168]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003bfc:	613b      	str	r3, [r7, #16]
 8003bfe:	e047      	b.n	8003c90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003c00:	4b27      	ldr	r3, [pc, #156]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f003 030c 	and.w	r3, r3, #12
 8003c08:	2b08      	cmp	r3, #8
 8003c0a:	d102      	bne.n	8003c12 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c0c:	4b26      	ldr	r3, [pc, #152]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c0e:	613b      	str	r3, [r7, #16]
 8003c10:	e03e      	b.n	8003c90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003c12:	4b23      	ldr	r3, [pc, #140]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f003 030c 	and.w	r3, r3, #12
 8003c1a:	2b0c      	cmp	r3, #12
 8003c1c:	d136      	bne.n	8003c8c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c1e:	4b20      	ldr	r3, [pc, #128]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	f003 0303 	and.w	r3, r3, #3
 8003c26:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c28:	4b1d      	ldr	r3, [pc, #116]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	091b      	lsrs	r3, r3, #4
 8003c2e:	f003 030f 	and.w	r3, r3, #15
 8003c32:	3301      	adds	r3, #1
 8003c34:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2b03      	cmp	r3, #3
 8003c3a:	d10c      	bne.n	8003c56 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c3c:	4a1a      	ldr	r2, [pc, #104]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c44:	4a16      	ldr	r2, [pc, #88]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c46:	68d2      	ldr	r2, [r2, #12]
 8003c48:	0a12      	lsrs	r2, r2, #8
 8003c4a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c4e:	fb02 f303 	mul.w	r3, r2, r3
 8003c52:	617b      	str	r3, [r7, #20]
      break;
 8003c54:	e00c      	b.n	8003c70 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c56:	4a13      	ldr	r2, [pc, #76]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c5e:	4a10      	ldr	r2, [pc, #64]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c60:	68d2      	ldr	r2, [r2, #12]
 8003c62:	0a12      	lsrs	r2, r2, #8
 8003c64:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c68:	fb02 f303 	mul.w	r3, r2, r3
 8003c6c:	617b      	str	r3, [r7, #20]
      break;
 8003c6e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c70:	4b0b      	ldr	r3, [pc, #44]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	0e5b      	lsrs	r3, r3, #25
 8003c76:	f003 0303 	and.w	r3, r3, #3
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c88:	613b      	str	r3, [r7, #16]
 8003c8a:	e001      	b.n	8003c90 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003c90:	693b      	ldr	r3, [r7, #16]
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	371c      	adds	r7, #28
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	40021000 	.word	0x40021000
 8003ca4:	00f42400 	.word	0x00f42400
 8003ca8:	016e3600 	.word	0x016e3600

08003cac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cb0:	4b03      	ldr	r3, [pc, #12]	; (8003cc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	20000000 	.word	0x20000000

08003cc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003cc8:	f7ff fff0 	bl	8003cac <HAL_RCC_GetHCLKFreq>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	4b06      	ldr	r3, [pc, #24]	; (8003ce8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	0a1b      	lsrs	r3, r3, #8
 8003cd4:	f003 0307 	and.w	r3, r3, #7
 8003cd8:	4904      	ldr	r1, [pc, #16]	; (8003cec <HAL_RCC_GetPCLK1Freq+0x28>)
 8003cda:	5ccb      	ldrb	r3, [r1, r3]
 8003cdc:	f003 031f 	and.w	r3, r3, #31
 8003ce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	40021000 	.word	0x40021000
 8003cec:	08004ecc 	.word	0x08004ecc

08003cf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003cf4:	f7ff ffda 	bl	8003cac <HAL_RCC_GetHCLKFreq>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	4b06      	ldr	r3, [pc, #24]	; (8003d14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	0adb      	lsrs	r3, r3, #11
 8003d00:	f003 0307 	and.w	r3, r3, #7
 8003d04:	4904      	ldr	r1, [pc, #16]	; (8003d18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d06:	5ccb      	ldrb	r3, [r1, r3]
 8003d08:	f003 031f 	and.w	r3, r3, #31
 8003d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	40021000 	.word	0x40021000
 8003d18:	08004ecc 	.word	0x08004ecc

08003d1c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b087      	sub	sp, #28
 8003d20:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d22:	4b1e      	ldr	r3, [pc, #120]	; (8003d9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	f003 0303 	and.w	r3, r3, #3
 8003d2a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d2c:	4b1b      	ldr	r3, [pc, #108]	; (8003d9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	091b      	lsrs	r3, r3, #4
 8003d32:	f003 030f 	and.w	r3, r3, #15
 8003d36:	3301      	adds	r3, #1
 8003d38:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	2b03      	cmp	r3, #3
 8003d3e:	d10c      	bne.n	8003d5a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d40:	4a17      	ldr	r2, [pc, #92]	; (8003da0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d48:	4a14      	ldr	r2, [pc, #80]	; (8003d9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d4a:	68d2      	ldr	r2, [r2, #12]
 8003d4c:	0a12      	lsrs	r2, r2, #8
 8003d4e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d52:	fb02 f303 	mul.w	r3, r2, r3
 8003d56:	617b      	str	r3, [r7, #20]
    break;
 8003d58:	e00c      	b.n	8003d74 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d5a:	4a12      	ldr	r2, [pc, #72]	; (8003da4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d62:	4a0e      	ldr	r2, [pc, #56]	; (8003d9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d64:	68d2      	ldr	r2, [r2, #12]
 8003d66:	0a12      	lsrs	r2, r2, #8
 8003d68:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d6c:	fb02 f303 	mul.w	r3, r2, r3
 8003d70:	617b      	str	r3, [r7, #20]
    break;
 8003d72:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d74:	4b09      	ldr	r3, [pc, #36]	; (8003d9c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	0e5b      	lsrs	r3, r3, #25
 8003d7a:	f003 0303 	and.w	r3, r3, #3
 8003d7e:	3301      	adds	r3, #1
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d8c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003d8e:	687b      	ldr	r3, [r7, #4]
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	371c      	adds	r7, #28
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr
 8003d9c:	40021000 	.word	0x40021000
 8003da0:	016e3600 	.word	0x016e3600
 8003da4:	00f42400 	.word	0x00f42400

08003da8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003db0:	2300      	movs	r3, #0
 8003db2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003db4:	2300      	movs	r3, #0
 8003db6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f000 8098 	beq.w	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dca:	4b43      	ldr	r3, [pc, #268]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d10d      	bne.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dd6:	4b40      	ldr	r3, [pc, #256]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dda:	4a3f      	ldr	r2, [pc, #252]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003de0:	6593      	str	r3, [r2, #88]	; 0x58
 8003de2:	4b3d      	ldr	r3, [pc, #244]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dea:	60bb      	str	r3, [r7, #8]
 8003dec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dee:	2301      	movs	r3, #1
 8003df0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003df2:	4b3a      	ldr	r3, [pc, #232]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a39      	ldr	r2, [pc, #228]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dfc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003dfe:	f7fd fba1 	bl	8001544 <HAL_GetTick>
 8003e02:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e04:	e009      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e06:	f7fd fb9d 	bl	8001544 <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d902      	bls.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	74fb      	strb	r3, [r7, #19]
        break;
 8003e18:	e005      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e1a:	4b30      	ldr	r3, [pc, #192]	; (8003edc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d0ef      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003e26:	7cfb      	ldrb	r3, [r7, #19]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d159      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e2c:	4b2a      	ldr	r3, [pc, #168]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e36:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d01e      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d019      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e48:	4b23      	ldr	r3, [pc, #140]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e52:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e54:	4b20      	ldr	r3, [pc, #128]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e5a:	4a1f      	ldr	r2, [pc, #124]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e64:	4b1c      	ldr	r3, [pc, #112]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e6a:	4a1b      	ldr	r2, [pc, #108]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e74:	4a18      	ldr	r2, [pc, #96]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	f003 0301 	and.w	r3, r3, #1
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d016      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e86:	f7fd fb5d 	bl	8001544 <HAL_GetTick>
 8003e8a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e8c:	e00b      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e8e:	f7fd fb59 	bl	8001544 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d902      	bls.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	74fb      	strb	r3, [r7, #19]
            break;
 8003ea4:	e006      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ea6:	4b0c      	ldr	r3, [pc, #48]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d0ec      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003eb4:	7cfb      	ldrb	r3, [r7, #19]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10b      	bne.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003eba:	4b07      	ldr	r3, [pc, #28]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ec8:	4903      	ldr	r1, [pc, #12]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003ed0:	e008      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ed2:	7cfb      	ldrb	r3, [r7, #19]
 8003ed4:	74bb      	strb	r3, [r7, #18]
 8003ed6:	e005      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003ed8:	40021000 	.word	0x40021000
 8003edc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ee0:	7cfb      	ldrb	r3, [r7, #19]
 8003ee2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ee4:	7c7b      	ldrb	r3, [r7, #17]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d105      	bne.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eea:	4ba7      	ldr	r3, [pc, #668]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eee:	4aa6      	ldr	r2, [pc, #664]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ef0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ef4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00a      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f02:	4ba1      	ldr	r3, [pc, #644]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f08:	f023 0203 	bic.w	r2, r3, #3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	499d      	ldr	r1, [pc, #628]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00a      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f24:	4b98      	ldr	r3, [pc, #608]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f2a:	f023 020c 	bic.w	r2, r3, #12
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	4995      	ldr	r1, [pc, #596]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0304 	and.w	r3, r3, #4
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00a      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f46:	4b90      	ldr	r3, [pc, #576]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f4c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	498c      	ldr	r1, [pc, #560]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0308 	and.w	r3, r3, #8
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00a      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f68:	4b87      	ldr	r3, [pc, #540]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f6e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	4984      	ldr	r1, [pc, #528]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0310 	and.w	r3, r3, #16
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00a      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f8a:	4b7f      	ldr	r3, [pc, #508]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	497b      	ldr	r1, [pc, #492]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0320 	and.w	r3, r3, #32
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00a      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fac:	4b76      	ldr	r3, [pc, #472]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	4973      	ldr	r1, [pc, #460]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00a      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fce:	4b6e      	ldr	r3, [pc, #440]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	69db      	ldr	r3, [r3, #28]
 8003fdc:	496a      	ldr	r1, [pc, #424]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00a      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ff0:	4b65      	ldr	r3, [pc, #404]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	4962      	ldr	r1, [pc, #392]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004000:	4313      	orrs	r3, r2
 8004002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00a      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004012:	4b5d      	ldr	r3, [pc, #372]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004018:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004020:	4959      	ldr	r1, [pc, #356]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004022:	4313      	orrs	r3, r2
 8004024:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00a      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004034:	4b54      	ldr	r3, [pc, #336]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004036:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800403a:	f023 0203 	bic.w	r2, r3, #3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004042:	4951      	ldr	r1, [pc, #324]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004044:	4313      	orrs	r3, r2
 8004046:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00a      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004056:	4b4c      	ldr	r3, [pc, #304]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800405c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004064:	4948      	ldr	r1, [pc, #288]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004066:	4313      	orrs	r3, r2
 8004068:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004074:	2b00      	cmp	r3, #0
 8004076:	d015      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004078:	4b43      	ldr	r3, [pc, #268]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800407a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800407e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004086:	4940      	ldr	r1, [pc, #256]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004088:	4313      	orrs	r3, r2
 800408a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004092:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004096:	d105      	bne.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004098:	4b3b      	ldr	r3, [pc, #236]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	4a3a      	ldr	r2, [pc, #232]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800409e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040a2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d015      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80040b0:	4b35      	ldr	r3, [pc, #212]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040be:	4932      	ldr	r1, [pc, #200]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040ce:	d105      	bne.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040d0:	4b2d      	ldr	r3, [pc, #180]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	4a2c      	ldr	r2, [pc, #176]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040da:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d015      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80040e8:	4b27      	ldr	r3, [pc, #156]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ee:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f6:	4924      	ldr	r1, [pc, #144]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004102:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004106:	d105      	bne.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004108:	4b1f      	ldr	r3, [pc, #124]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	4a1e      	ldr	r2, [pc, #120]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800410e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004112:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d015      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004120:	4b19      	ldr	r3, [pc, #100]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004126:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800412e:	4916      	ldr	r1, [pc, #88]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004130:	4313      	orrs	r3, r2
 8004132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800413a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800413e:	d105      	bne.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004140:	4b11      	ldr	r3, [pc, #68]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	4a10      	ldr	r2, [pc, #64]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004146:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800414a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d019      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004158:	4b0b      	ldr	r3, [pc, #44]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800415a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800415e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004166:	4908      	ldr	r1, [pc, #32]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004168:	4313      	orrs	r3, r2
 800416a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004172:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004176:	d109      	bne.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004178:	4b03      	ldr	r3, [pc, #12]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	4a02      	ldr	r2, [pc, #8]	; (8004188 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800417e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004182:	60d3      	str	r3, [r2, #12]
 8004184:	e002      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004186:	bf00      	nop
 8004188:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d015      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004198:	4b29      	ldr	r3, [pc, #164]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800419a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a6:	4926      	ldr	r1, [pc, #152]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041b6:	d105      	bne.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80041b8:	4b21      	ldr	r3, [pc, #132]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	4a20      	ldr	r2, [pc, #128]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041c2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d015      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80041d0:	4b1b      	ldr	r3, [pc, #108]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041de:	4918      	ldr	r1, [pc, #96]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ee:	d105      	bne.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80041f0:	4b13      	ldr	r3, [pc, #76]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	4a12      	ldr	r2, [pc, #72]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80041f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041fa:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d015      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004208:	4b0d      	ldr	r3, [pc, #52]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800420a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800420e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004216:	490a      	ldr	r1, [pc, #40]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004218:	4313      	orrs	r3, r2
 800421a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004222:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004226:	d105      	bne.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004228:	4b05      	ldr	r3, [pc, #20]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	4a04      	ldr	r2, [pc, #16]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800422e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004232:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004234:	7cbb      	ldrb	r3, [r7, #18]
}
 8004236:	4618      	mov	r0, r3
 8004238:	3718      	adds	r7, #24
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	40021000 	.word	0x40021000

08004244 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d101      	bne.n	8004256 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e042      	b.n	80042dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800425c:	2b00      	cmp	r3, #0
 800425e:	d106      	bne.n	800426e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f7fd f841 	bl	80012f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2224      	movs	r2, #36	; 0x24
 8004272:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f022 0201 	bic.w	r2, r2, #1
 8004284:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 f82c 	bl	80042e4 <UART_SetConfig>
 800428c:	4603      	mov	r3, r0
 800428e:	2b01      	cmp	r3, #1
 8004290:	d101      	bne.n	8004296 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e022      	b.n	80042dc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800429a:	2b00      	cmp	r3, #0
 800429c:	d002      	beq.n	80042a4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 fb1c 	bl	80048dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	685a      	ldr	r2, [r3, #4]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	689a      	ldr	r2, [r3, #8]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f042 0201 	orr.w	r2, r2, #1
 80042d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 fba3 	bl	8004a20 <UART_CheckIdleState>
 80042da:	4603      	mov	r3, r0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3708      	adds	r7, #8
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042e8:	b08c      	sub	sp, #48	; 0x30
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80042ee:	2300      	movs	r3, #0
 80042f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	689a      	ldr	r2, [r3, #8]
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	431a      	orrs	r2, r3
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	431a      	orrs	r2, r3
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	69db      	ldr	r3, [r3, #28]
 8004308:	4313      	orrs	r3, r2
 800430a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	4baa      	ldr	r3, [pc, #680]	; (80045bc <UART_SetConfig+0x2d8>)
 8004314:	4013      	ands	r3, r2
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	6812      	ldr	r2, [r2, #0]
 800431a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800431c:	430b      	orrs	r3, r1
 800431e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	68da      	ldr	r2, [r3, #12]
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	430a      	orrs	r2, r1
 8004334:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a9f      	ldr	r2, [pc, #636]	; (80045c0 <UART_SetConfig+0x2dc>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d004      	beq.n	8004350 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	6a1b      	ldr	r3, [r3, #32]
 800434a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800434c:	4313      	orrs	r3, r2
 800434e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800435a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	6812      	ldr	r2, [r2, #0]
 8004362:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004364:	430b      	orrs	r3, r1
 8004366:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436e:	f023 010f 	bic.w	r1, r3, #15
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	430a      	orrs	r2, r1
 800437c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a90      	ldr	r2, [pc, #576]	; (80045c4 <UART_SetConfig+0x2e0>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d125      	bne.n	80043d4 <UART_SetConfig+0xf0>
 8004388:	4b8f      	ldr	r3, [pc, #572]	; (80045c8 <UART_SetConfig+0x2e4>)
 800438a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800438e:	f003 0303 	and.w	r3, r3, #3
 8004392:	2b03      	cmp	r3, #3
 8004394:	d81a      	bhi.n	80043cc <UART_SetConfig+0xe8>
 8004396:	a201      	add	r2, pc, #4	; (adr r2, 800439c <UART_SetConfig+0xb8>)
 8004398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800439c:	080043ad 	.word	0x080043ad
 80043a0:	080043bd 	.word	0x080043bd
 80043a4:	080043b5 	.word	0x080043b5
 80043a8:	080043c5 	.word	0x080043c5
 80043ac:	2301      	movs	r3, #1
 80043ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043b2:	e116      	b.n	80045e2 <UART_SetConfig+0x2fe>
 80043b4:	2302      	movs	r3, #2
 80043b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043ba:	e112      	b.n	80045e2 <UART_SetConfig+0x2fe>
 80043bc:	2304      	movs	r3, #4
 80043be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043c2:	e10e      	b.n	80045e2 <UART_SetConfig+0x2fe>
 80043c4:	2308      	movs	r3, #8
 80043c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043ca:	e10a      	b.n	80045e2 <UART_SetConfig+0x2fe>
 80043cc:	2310      	movs	r3, #16
 80043ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043d2:	e106      	b.n	80045e2 <UART_SetConfig+0x2fe>
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a7c      	ldr	r2, [pc, #496]	; (80045cc <UART_SetConfig+0x2e8>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d138      	bne.n	8004450 <UART_SetConfig+0x16c>
 80043de:	4b7a      	ldr	r3, [pc, #488]	; (80045c8 <UART_SetConfig+0x2e4>)
 80043e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e4:	f003 030c 	and.w	r3, r3, #12
 80043e8:	2b0c      	cmp	r3, #12
 80043ea:	d82d      	bhi.n	8004448 <UART_SetConfig+0x164>
 80043ec:	a201      	add	r2, pc, #4	; (adr r2, 80043f4 <UART_SetConfig+0x110>)
 80043ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f2:	bf00      	nop
 80043f4:	08004429 	.word	0x08004429
 80043f8:	08004449 	.word	0x08004449
 80043fc:	08004449 	.word	0x08004449
 8004400:	08004449 	.word	0x08004449
 8004404:	08004439 	.word	0x08004439
 8004408:	08004449 	.word	0x08004449
 800440c:	08004449 	.word	0x08004449
 8004410:	08004449 	.word	0x08004449
 8004414:	08004431 	.word	0x08004431
 8004418:	08004449 	.word	0x08004449
 800441c:	08004449 	.word	0x08004449
 8004420:	08004449 	.word	0x08004449
 8004424:	08004441 	.word	0x08004441
 8004428:	2300      	movs	r3, #0
 800442a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800442e:	e0d8      	b.n	80045e2 <UART_SetConfig+0x2fe>
 8004430:	2302      	movs	r3, #2
 8004432:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004436:	e0d4      	b.n	80045e2 <UART_SetConfig+0x2fe>
 8004438:	2304      	movs	r3, #4
 800443a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800443e:	e0d0      	b.n	80045e2 <UART_SetConfig+0x2fe>
 8004440:	2308      	movs	r3, #8
 8004442:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004446:	e0cc      	b.n	80045e2 <UART_SetConfig+0x2fe>
 8004448:	2310      	movs	r3, #16
 800444a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800444e:	e0c8      	b.n	80045e2 <UART_SetConfig+0x2fe>
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a5e      	ldr	r2, [pc, #376]	; (80045d0 <UART_SetConfig+0x2ec>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d125      	bne.n	80044a6 <UART_SetConfig+0x1c2>
 800445a:	4b5b      	ldr	r3, [pc, #364]	; (80045c8 <UART_SetConfig+0x2e4>)
 800445c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004460:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004464:	2b30      	cmp	r3, #48	; 0x30
 8004466:	d016      	beq.n	8004496 <UART_SetConfig+0x1b2>
 8004468:	2b30      	cmp	r3, #48	; 0x30
 800446a:	d818      	bhi.n	800449e <UART_SetConfig+0x1ba>
 800446c:	2b20      	cmp	r3, #32
 800446e:	d00a      	beq.n	8004486 <UART_SetConfig+0x1a2>
 8004470:	2b20      	cmp	r3, #32
 8004472:	d814      	bhi.n	800449e <UART_SetConfig+0x1ba>
 8004474:	2b00      	cmp	r3, #0
 8004476:	d002      	beq.n	800447e <UART_SetConfig+0x19a>
 8004478:	2b10      	cmp	r3, #16
 800447a:	d008      	beq.n	800448e <UART_SetConfig+0x1aa>
 800447c:	e00f      	b.n	800449e <UART_SetConfig+0x1ba>
 800447e:	2300      	movs	r3, #0
 8004480:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004484:	e0ad      	b.n	80045e2 <UART_SetConfig+0x2fe>
 8004486:	2302      	movs	r3, #2
 8004488:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800448c:	e0a9      	b.n	80045e2 <UART_SetConfig+0x2fe>
 800448e:	2304      	movs	r3, #4
 8004490:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004494:	e0a5      	b.n	80045e2 <UART_SetConfig+0x2fe>
 8004496:	2308      	movs	r3, #8
 8004498:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800449c:	e0a1      	b.n	80045e2 <UART_SetConfig+0x2fe>
 800449e:	2310      	movs	r3, #16
 80044a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044a4:	e09d      	b.n	80045e2 <UART_SetConfig+0x2fe>
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a4a      	ldr	r2, [pc, #296]	; (80045d4 <UART_SetConfig+0x2f0>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d125      	bne.n	80044fc <UART_SetConfig+0x218>
 80044b0:	4b45      	ldr	r3, [pc, #276]	; (80045c8 <UART_SetConfig+0x2e4>)
 80044b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80044ba:	2bc0      	cmp	r3, #192	; 0xc0
 80044bc:	d016      	beq.n	80044ec <UART_SetConfig+0x208>
 80044be:	2bc0      	cmp	r3, #192	; 0xc0
 80044c0:	d818      	bhi.n	80044f4 <UART_SetConfig+0x210>
 80044c2:	2b80      	cmp	r3, #128	; 0x80
 80044c4:	d00a      	beq.n	80044dc <UART_SetConfig+0x1f8>
 80044c6:	2b80      	cmp	r3, #128	; 0x80
 80044c8:	d814      	bhi.n	80044f4 <UART_SetConfig+0x210>
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d002      	beq.n	80044d4 <UART_SetConfig+0x1f0>
 80044ce:	2b40      	cmp	r3, #64	; 0x40
 80044d0:	d008      	beq.n	80044e4 <UART_SetConfig+0x200>
 80044d2:	e00f      	b.n	80044f4 <UART_SetConfig+0x210>
 80044d4:	2300      	movs	r3, #0
 80044d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044da:	e082      	b.n	80045e2 <UART_SetConfig+0x2fe>
 80044dc:	2302      	movs	r3, #2
 80044de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044e2:	e07e      	b.n	80045e2 <UART_SetConfig+0x2fe>
 80044e4:	2304      	movs	r3, #4
 80044e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044ea:	e07a      	b.n	80045e2 <UART_SetConfig+0x2fe>
 80044ec:	2308      	movs	r3, #8
 80044ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044f2:	e076      	b.n	80045e2 <UART_SetConfig+0x2fe>
 80044f4:	2310      	movs	r3, #16
 80044f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80044fa:	e072      	b.n	80045e2 <UART_SetConfig+0x2fe>
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a35      	ldr	r2, [pc, #212]	; (80045d8 <UART_SetConfig+0x2f4>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d12a      	bne.n	800455c <UART_SetConfig+0x278>
 8004506:	4b30      	ldr	r3, [pc, #192]	; (80045c8 <UART_SetConfig+0x2e4>)
 8004508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800450c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004510:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004514:	d01a      	beq.n	800454c <UART_SetConfig+0x268>
 8004516:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800451a:	d81b      	bhi.n	8004554 <UART_SetConfig+0x270>
 800451c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004520:	d00c      	beq.n	800453c <UART_SetConfig+0x258>
 8004522:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004526:	d815      	bhi.n	8004554 <UART_SetConfig+0x270>
 8004528:	2b00      	cmp	r3, #0
 800452a:	d003      	beq.n	8004534 <UART_SetConfig+0x250>
 800452c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004530:	d008      	beq.n	8004544 <UART_SetConfig+0x260>
 8004532:	e00f      	b.n	8004554 <UART_SetConfig+0x270>
 8004534:	2300      	movs	r3, #0
 8004536:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800453a:	e052      	b.n	80045e2 <UART_SetConfig+0x2fe>
 800453c:	2302      	movs	r3, #2
 800453e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004542:	e04e      	b.n	80045e2 <UART_SetConfig+0x2fe>
 8004544:	2304      	movs	r3, #4
 8004546:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800454a:	e04a      	b.n	80045e2 <UART_SetConfig+0x2fe>
 800454c:	2308      	movs	r3, #8
 800454e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004552:	e046      	b.n	80045e2 <UART_SetConfig+0x2fe>
 8004554:	2310      	movs	r3, #16
 8004556:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800455a:	e042      	b.n	80045e2 <UART_SetConfig+0x2fe>
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a17      	ldr	r2, [pc, #92]	; (80045c0 <UART_SetConfig+0x2dc>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d13a      	bne.n	80045dc <UART_SetConfig+0x2f8>
 8004566:	4b18      	ldr	r3, [pc, #96]	; (80045c8 <UART_SetConfig+0x2e4>)
 8004568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800456c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004570:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004574:	d01a      	beq.n	80045ac <UART_SetConfig+0x2c8>
 8004576:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800457a:	d81b      	bhi.n	80045b4 <UART_SetConfig+0x2d0>
 800457c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004580:	d00c      	beq.n	800459c <UART_SetConfig+0x2b8>
 8004582:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004586:	d815      	bhi.n	80045b4 <UART_SetConfig+0x2d0>
 8004588:	2b00      	cmp	r3, #0
 800458a:	d003      	beq.n	8004594 <UART_SetConfig+0x2b0>
 800458c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004590:	d008      	beq.n	80045a4 <UART_SetConfig+0x2c0>
 8004592:	e00f      	b.n	80045b4 <UART_SetConfig+0x2d0>
 8004594:	2300      	movs	r3, #0
 8004596:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800459a:	e022      	b.n	80045e2 <UART_SetConfig+0x2fe>
 800459c:	2302      	movs	r3, #2
 800459e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045a2:	e01e      	b.n	80045e2 <UART_SetConfig+0x2fe>
 80045a4:	2304      	movs	r3, #4
 80045a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045aa:	e01a      	b.n	80045e2 <UART_SetConfig+0x2fe>
 80045ac:	2308      	movs	r3, #8
 80045ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045b2:	e016      	b.n	80045e2 <UART_SetConfig+0x2fe>
 80045b4:	2310      	movs	r3, #16
 80045b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045ba:	e012      	b.n	80045e2 <UART_SetConfig+0x2fe>
 80045bc:	cfff69f3 	.word	0xcfff69f3
 80045c0:	40008000 	.word	0x40008000
 80045c4:	40013800 	.word	0x40013800
 80045c8:	40021000 	.word	0x40021000
 80045cc:	40004400 	.word	0x40004400
 80045d0:	40004800 	.word	0x40004800
 80045d4:	40004c00 	.word	0x40004c00
 80045d8:	40005000 	.word	0x40005000
 80045dc:	2310      	movs	r3, #16
 80045de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4aae      	ldr	r2, [pc, #696]	; (80048a0 <UART_SetConfig+0x5bc>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	f040 8097 	bne.w	800471c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80045ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80045f2:	2b08      	cmp	r3, #8
 80045f4:	d823      	bhi.n	800463e <UART_SetConfig+0x35a>
 80045f6:	a201      	add	r2, pc, #4	; (adr r2, 80045fc <UART_SetConfig+0x318>)
 80045f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045fc:	08004621 	.word	0x08004621
 8004600:	0800463f 	.word	0x0800463f
 8004604:	08004629 	.word	0x08004629
 8004608:	0800463f 	.word	0x0800463f
 800460c:	0800462f 	.word	0x0800462f
 8004610:	0800463f 	.word	0x0800463f
 8004614:	0800463f 	.word	0x0800463f
 8004618:	0800463f 	.word	0x0800463f
 800461c:	08004637 	.word	0x08004637
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004620:	f7ff fb50 	bl	8003cc4 <HAL_RCC_GetPCLK1Freq>
 8004624:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004626:	e010      	b.n	800464a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004628:	4b9e      	ldr	r3, [pc, #632]	; (80048a4 <UART_SetConfig+0x5c0>)
 800462a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800462c:	e00d      	b.n	800464a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800462e:	f7ff fadb 	bl	8003be8 <HAL_RCC_GetSysClockFreq>
 8004632:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004634:	e009      	b.n	800464a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004636:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800463a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800463c:	e005      	b.n	800464a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800463e:	2300      	movs	r3, #0
 8004640:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004648:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800464a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464c:	2b00      	cmp	r3, #0
 800464e:	f000 8130 	beq.w	80048b2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004656:	4a94      	ldr	r2, [pc, #592]	; (80048a8 <UART_SetConfig+0x5c4>)
 8004658:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800465c:	461a      	mov	r2, r3
 800465e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004660:	fbb3 f3f2 	udiv	r3, r3, r2
 8004664:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	685a      	ldr	r2, [r3, #4]
 800466a:	4613      	mov	r3, r2
 800466c:	005b      	lsls	r3, r3, #1
 800466e:	4413      	add	r3, r2
 8004670:	69ba      	ldr	r2, [r7, #24]
 8004672:	429a      	cmp	r2, r3
 8004674:	d305      	bcc.n	8004682 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800467c:	69ba      	ldr	r2, [r7, #24]
 800467e:	429a      	cmp	r2, r3
 8004680:	d903      	bls.n	800468a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004688:	e113      	b.n	80048b2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800468a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468c:	2200      	movs	r2, #0
 800468e:	60bb      	str	r3, [r7, #8]
 8004690:	60fa      	str	r2, [r7, #12]
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004696:	4a84      	ldr	r2, [pc, #528]	; (80048a8 <UART_SetConfig+0x5c4>)
 8004698:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800469c:	b29b      	uxth	r3, r3
 800469e:	2200      	movs	r2, #0
 80046a0:	603b      	str	r3, [r7, #0]
 80046a2:	607a      	str	r2, [r7, #4]
 80046a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80046ac:	f7fc f9d2 	bl	8000a54 <__aeabi_uldivmod>
 80046b0:	4602      	mov	r2, r0
 80046b2:	460b      	mov	r3, r1
 80046b4:	4610      	mov	r0, r2
 80046b6:	4619      	mov	r1, r3
 80046b8:	f04f 0200 	mov.w	r2, #0
 80046bc:	f04f 0300 	mov.w	r3, #0
 80046c0:	020b      	lsls	r3, r1, #8
 80046c2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80046c6:	0202      	lsls	r2, r0, #8
 80046c8:	6979      	ldr	r1, [r7, #20]
 80046ca:	6849      	ldr	r1, [r1, #4]
 80046cc:	0849      	lsrs	r1, r1, #1
 80046ce:	2000      	movs	r0, #0
 80046d0:	460c      	mov	r4, r1
 80046d2:	4605      	mov	r5, r0
 80046d4:	eb12 0804 	adds.w	r8, r2, r4
 80046d8:	eb43 0905 	adc.w	r9, r3, r5
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	469a      	mov	sl, r3
 80046e4:	4693      	mov	fp, r2
 80046e6:	4652      	mov	r2, sl
 80046e8:	465b      	mov	r3, fp
 80046ea:	4640      	mov	r0, r8
 80046ec:	4649      	mov	r1, r9
 80046ee:	f7fc f9b1 	bl	8000a54 <__aeabi_uldivmod>
 80046f2:	4602      	mov	r2, r0
 80046f4:	460b      	mov	r3, r1
 80046f6:	4613      	mov	r3, r2
 80046f8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80046fa:	6a3b      	ldr	r3, [r7, #32]
 80046fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004700:	d308      	bcc.n	8004714 <UART_SetConfig+0x430>
 8004702:	6a3b      	ldr	r3, [r7, #32]
 8004704:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004708:	d204      	bcs.n	8004714 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	6a3a      	ldr	r2, [r7, #32]
 8004710:	60da      	str	r2, [r3, #12]
 8004712:	e0ce      	b.n	80048b2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800471a:	e0ca      	b.n	80048b2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	69db      	ldr	r3, [r3, #28]
 8004720:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004724:	d166      	bne.n	80047f4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004726:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800472a:	2b08      	cmp	r3, #8
 800472c:	d827      	bhi.n	800477e <UART_SetConfig+0x49a>
 800472e:	a201      	add	r2, pc, #4	; (adr r2, 8004734 <UART_SetConfig+0x450>)
 8004730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004734:	08004759 	.word	0x08004759
 8004738:	08004761 	.word	0x08004761
 800473c:	08004769 	.word	0x08004769
 8004740:	0800477f 	.word	0x0800477f
 8004744:	0800476f 	.word	0x0800476f
 8004748:	0800477f 	.word	0x0800477f
 800474c:	0800477f 	.word	0x0800477f
 8004750:	0800477f 	.word	0x0800477f
 8004754:	08004777 	.word	0x08004777
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004758:	f7ff fab4 	bl	8003cc4 <HAL_RCC_GetPCLK1Freq>
 800475c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800475e:	e014      	b.n	800478a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004760:	f7ff fac6 	bl	8003cf0 <HAL_RCC_GetPCLK2Freq>
 8004764:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004766:	e010      	b.n	800478a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004768:	4b4e      	ldr	r3, [pc, #312]	; (80048a4 <UART_SetConfig+0x5c0>)
 800476a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800476c:	e00d      	b.n	800478a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800476e:	f7ff fa3b 	bl	8003be8 <HAL_RCC_GetSysClockFreq>
 8004772:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004774:	e009      	b.n	800478a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004776:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800477a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800477c:	e005      	b.n	800478a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800477e:	2300      	movs	r3, #0
 8004780:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004788:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800478a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478c:	2b00      	cmp	r3, #0
 800478e:	f000 8090 	beq.w	80048b2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004796:	4a44      	ldr	r2, [pc, #272]	; (80048a8 <UART_SetConfig+0x5c4>)
 8004798:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800479c:	461a      	mov	r2, r3
 800479e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80047a4:	005a      	lsls	r2, r3, #1
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	085b      	lsrs	r3, r3, #1
 80047ac:	441a      	add	r2, r3
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047b8:	6a3b      	ldr	r3, [r7, #32]
 80047ba:	2b0f      	cmp	r3, #15
 80047bc:	d916      	bls.n	80047ec <UART_SetConfig+0x508>
 80047be:	6a3b      	ldr	r3, [r7, #32]
 80047c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047c4:	d212      	bcs.n	80047ec <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047c6:	6a3b      	ldr	r3, [r7, #32]
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	f023 030f 	bic.w	r3, r3, #15
 80047ce:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047d0:	6a3b      	ldr	r3, [r7, #32]
 80047d2:	085b      	lsrs	r3, r3, #1
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	f003 0307 	and.w	r3, r3, #7
 80047da:	b29a      	uxth	r2, r3
 80047dc:	8bfb      	ldrh	r3, [r7, #30]
 80047de:	4313      	orrs	r3, r2
 80047e0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	8bfa      	ldrh	r2, [r7, #30]
 80047e8:	60da      	str	r2, [r3, #12]
 80047ea:	e062      	b.n	80048b2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80047f2:	e05e      	b.n	80048b2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80047f8:	2b08      	cmp	r3, #8
 80047fa:	d828      	bhi.n	800484e <UART_SetConfig+0x56a>
 80047fc:	a201      	add	r2, pc, #4	; (adr r2, 8004804 <UART_SetConfig+0x520>)
 80047fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004802:	bf00      	nop
 8004804:	08004829 	.word	0x08004829
 8004808:	08004831 	.word	0x08004831
 800480c:	08004839 	.word	0x08004839
 8004810:	0800484f 	.word	0x0800484f
 8004814:	0800483f 	.word	0x0800483f
 8004818:	0800484f 	.word	0x0800484f
 800481c:	0800484f 	.word	0x0800484f
 8004820:	0800484f 	.word	0x0800484f
 8004824:	08004847 	.word	0x08004847
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004828:	f7ff fa4c 	bl	8003cc4 <HAL_RCC_GetPCLK1Freq>
 800482c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800482e:	e014      	b.n	800485a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004830:	f7ff fa5e 	bl	8003cf0 <HAL_RCC_GetPCLK2Freq>
 8004834:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004836:	e010      	b.n	800485a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004838:	4b1a      	ldr	r3, [pc, #104]	; (80048a4 <UART_SetConfig+0x5c0>)
 800483a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800483c:	e00d      	b.n	800485a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800483e:	f7ff f9d3 	bl	8003be8 <HAL_RCC_GetSysClockFreq>
 8004842:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004844:	e009      	b.n	800485a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004846:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800484a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800484c:	e005      	b.n	800485a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800484e:	2300      	movs	r3, #0
 8004850:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004858:	bf00      	nop
    }

    if (pclk != 0U)
 800485a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485c:	2b00      	cmp	r3, #0
 800485e:	d028      	beq.n	80048b2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004864:	4a10      	ldr	r2, [pc, #64]	; (80048a8 <UART_SetConfig+0x5c4>)
 8004866:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800486a:	461a      	mov	r2, r3
 800486c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	085b      	lsrs	r3, r3, #1
 8004878:	441a      	add	r2, r3
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004882:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004884:	6a3b      	ldr	r3, [r7, #32]
 8004886:	2b0f      	cmp	r3, #15
 8004888:	d910      	bls.n	80048ac <UART_SetConfig+0x5c8>
 800488a:	6a3b      	ldr	r3, [r7, #32]
 800488c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004890:	d20c      	bcs.n	80048ac <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004892:	6a3b      	ldr	r3, [r7, #32]
 8004894:	b29a      	uxth	r2, r3
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	60da      	str	r2, [r3, #12]
 800489c:	e009      	b.n	80048b2 <UART_SetConfig+0x5ce>
 800489e:	bf00      	nop
 80048a0:	40008000 	.word	0x40008000
 80048a4:	00f42400 	.word	0x00f42400
 80048a8:	08004ed4 	.word	0x08004ed4
      }
      else
      {
        ret = HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	2201      	movs	r2, #1
 80048be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	2200      	movs	r2, #0
 80048c6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	2200      	movs	r2, #0
 80048cc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80048ce:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3730      	adds	r7, #48	; 0x30
 80048d6:	46bd      	mov	sp, r7
 80048d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080048dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e8:	f003 0301 	and.w	r3, r3, #1
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00a      	beq.n	8004906 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	430a      	orrs	r2, r1
 8004904:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00a      	beq.n	8004928 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	430a      	orrs	r2, r1
 8004926:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492c:	f003 0304 	and.w	r3, r3, #4
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00a      	beq.n	800494a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	430a      	orrs	r2, r1
 8004948:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800494e:	f003 0308 	and.w	r3, r3, #8
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00a      	beq.n	800496c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	430a      	orrs	r2, r1
 800496a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004970:	f003 0310 	and.w	r3, r3, #16
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00a      	beq.n	800498e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	430a      	orrs	r2, r1
 800498c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004992:	f003 0320 	and.w	r3, r3, #32
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00a      	beq.n	80049b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	430a      	orrs	r2, r1
 80049ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d01a      	beq.n	80049f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	430a      	orrs	r2, r1
 80049d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049da:	d10a      	bne.n	80049f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	430a      	orrs	r2, r1
 80049f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00a      	beq.n	8004a14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	430a      	orrs	r2, r1
 8004a12:	605a      	str	r2, [r3, #4]
  }
}
 8004a14:	bf00      	nop
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b086      	sub	sp, #24
 8004a24:	af02      	add	r7, sp, #8
 8004a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a30:	f7fc fd88 	bl	8001544 <HAL_GetTick>
 8004a34:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0308 	and.w	r3, r3, #8
 8004a40:	2b08      	cmp	r3, #8
 8004a42:	d10e      	bne.n	8004a62 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a48:	9300      	str	r3, [sp, #0]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f82f 	bl	8004ab6 <UART_WaitOnFlagUntilTimeout>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d001      	beq.n	8004a62 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e025      	b.n	8004aae <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0304 	and.w	r3, r3, #4
 8004a6c:	2b04      	cmp	r3, #4
 8004a6e:	d10e      	bne.n	8004a8e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a74:	9300      	str	r3, [sp, #0]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 f819 	bl	8004ab6 <UART_WaitOnFlagUntilTimeout>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d001      	beq.n	8004a8e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e00f      	b.n	8004aae <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2220      	movs	r2, #32
 8004a92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2220      	movs	r2, #32
 8004a9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3710      	adds	r7, #16
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b09c      	sub	sp, #112	; 0x70
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	60f8      	str	r0, [r7, #12]
 8004abe:	60b9      	str	r1, [r7, #8]
 8004ac0:	603b      	str	r3, [r7, #0]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ac6:	e0a9      	b.n	8004c1c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ac8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ace:	f000 80a5 	beq.w	8004c1c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ad2:	f7fc fd37 	bl	8001544 <HAL_GetTick>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d302      	bcc.n	8004ae8 <UART_WaitOnFlagUntilTimeout+0x32>
 8004ae2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d140      	bne.n	8004b6a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004af0:	e853 3f00 	ldrex	r3, [r3]
 8004af4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004af6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004af8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004afc:	667b      	str	r3, [r7, #100]	; 0x64
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	461a      	mov	r2, r3
 8004b04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b08:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004b0c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004b0e:	e841 2300 	strex	r3, r2, [r1]
 8004b12:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004b14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1e6      	bne.n	8004ae8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	3308      	adds	r3, #8
 8004b20:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b24:	e853 3f00 	ldrex	r3, [r3]
 8004b28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b2c:	f023 0301 	bic.w	r3, r3, #1
 8004b30:	663b      	str	r3, [r7, #96]	; 0x60
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	3308      	adds	r3, #8
 8004b38:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004b3a:	64ba      	str	r2, [r7, #72]	; 0x48
 8004b3c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004b40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b42:	e841 2300 	strex	r3, r2, [r1]
 8004b46:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004b48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d1e5      	bne.n	8004b1a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2220      	movs	r2, #32
 8004b52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2220      	movs	r2, #32
 8004b5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e069      	b.n	8004c3e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0304 	and.w	r3, r3, #4
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d051      	beq.n	8004c1c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	69db      	ldr	r3, [r3, #28]
 8004b7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b86:	d149      	bne.n	8004c1c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b90:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9a:	e853 3f00 	ldrex	r3, [r3]
 8004b9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ba6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	461a      	mov	r2, r3
 8004bae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bb0:	637b      	str	r3, [r7, #52]	; 0x34
 8004bb2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004bb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bb8:	e841 2300 	strex	r3, r2, [r1]
 8004bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1e6      	bne.n	8004b92 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	3308      	adds	r3, #8
 8004bca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	e853 3f00 	ldrex	r3, [r3]
 8004bd2:	613b      	str	r3, [r7, #16]
   return(result);
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	f023 0301 	bic.w	r3, r3, #1
 8004bda:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	3308      	adds	r3, #8
 8004be2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004be4:	623a      	str	r2, [r7, #32]
 8004be6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be8:	69f9      	ldr	r1, [r7, #28]
 8004bea:	6a3a      	ldr	r2, [r7, #32]
 8004bec:	e841 2300 	strex	r3, r2, [r1]
 8004bf0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1e5      	bne.n	8004bc4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2220      	movs	r2, #32
 8004bfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2220      	movs	r2, #32
 8004c04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2220      	movs	r2, #32
 8004c0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e010      	b.n	8004c3e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	69da      	ldr	r2, [r3, #28]
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	4013      	ands	r3, r2
 8004c26:	68ba      	ldr	r2, [r7, #8]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	bf0c      	ite	eq
 8004c2c:	2301      	moveq	r3, #1
 8004c2e:	2300      	movne	r3, #0
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	461a      	mov	r2, r3
 8004c34:	79fb      	ldrb	r3, [r7, #7]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	f43f af46 	beq.w	8004ac8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3770      	adds	r7, #112	; 0x70
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004c46:	b480      	push	{r7}
 8004c48:	b085      	sub	sp, #20
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d101      	bne.n	8004c5c <HAL_UARTEx_DisableFifoMode+0x16>
 8004c58:	2302      	movs	r3, #2
 8004c5a:	e027      	b.n	8004cac <HAL_UARTEx_DisableFifoMode+0x66>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2224      	movs	r2, #36	; 0x24
 8004c68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f022 0201 	bic.w	r2, r2, #1
 8004c82:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004c8a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68fa      	ldr	r2, [r7, #12]
 8004c98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2220      	movs	r2, #32
 8004c9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3714      	adds	r7, #20
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d101      	bne.n	8004cd0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004ccc:	2302      	movs	r3, #2
 8004cce:	e02d      	b.n	8004d2c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2224      	movs	r2, #36	; 0x24
 8004cdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f022 0201 	bic.w	r2, r2, #1
 8004cf6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	683a      	ldr	r2, [r7, #0]
 8004d08:	430a      	orrs	r2, r1
 8004d0a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 f84f 	bl	8004db0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2220      	movs	r2, #32
 8004d1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004d2a:	2300      	movs	r3, #0
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3710      	adds	r7, #16
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d101      	bne.n	8004d4c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004d48:	2302      	movs	r3, #2
 8004d4a:	e02d      	b.n	8004da8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2224      	movs	r2, #36	; 0x24
 8004d58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f022 0201 	bic.w	r2, r2, #1
 8004d72:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	683a      	ldr	r2, [r7, #0]
 8004d84:	430a      	orrs	r2, r1
 8004d86:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f000 f811 	bl	8004db0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2220      	movs	r2, #32
 8004d9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3710      	adds	r7, #16
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d108      	bne.n	8004dd2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004dd0:	e031      	b.n	8004e36 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004dd2:	2308      	movs	r3, #8
 8004dd4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004dd6:	2308      	movs	r3, #8
 8004dd8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	0e5b      	lsrs	r3, r3, #25
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	f003 0307 	and.w	r3, r3, #7
 8004de8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	0f5b      	lsrs	r3, r3, #29
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	f003 0307 	and.w	r3, r3, #7
 8004df8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004dfa:	7bbb      	ldrb	r3, [r7, #14]
 8004dfc:	7b3a      	ldrb	r2, [r7, #12]
 8004dfe:	4911      	ldr	r1, [pc, #68]	; (8004e44 <UARTEx_SetNbDataToProcess+0x94>)
 8004e00:	5c8a      	ldrb	r2, [r1, r2]
 8004e02:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004e06:	7b3a      	ldrb	r2, [r7, #12]
 8004e08:	490f      	ldr	r1, [pc, #60]	; (8004e48 <UARTEx_SetNbDataToProcess+0x98>)
 8004e0a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004e0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004e18:	7bfb      	ldrb	r3, [r7, #15]
 8004e1a:	7b7a      	ldrb	r2, [r7, #13]
 8004e1c:	4909      	ldr	r1, [pc, #36]	; (8004e44 <UARTEx_SetNbDataToProcess+0x94>)
 8004e1e:	5c8a      	ldrb	r2, [r1, r2]
 8004e20:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004e24:	7b7a      	ldrb	r2, [r7, #13]
 8004e26:	4908      	ldr	r1, [pc, #32]	; (8004e48 <UARTEx_SetNbDataToProcess+0x98>)
 8004e28:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004e2a:	fb93 f3f2 	sdiv	r3, r3, r2
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004e36:	bf00      	nop
 8004e38:	3714      	adds	r7, #20
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop
 8004e44:	08004eec 	.word	0x08004eec
 8004e48:	08004ef4 	.word	0x08004ef4

08004e4c <memset>:
 8004e4c:	4402      	add	r2, r0
 8004e4e:	4603      	mov	r3, r0
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d100      	bne.n	8004e56 <memset+0xa>
 8004e54:	4770      	bx	lr
 8004e56:	f803 1b01 	strb.w	r1, [r3], #1
 8004e5a:	e7f9      	b.n	8004e50 <memset+0x4>

08004e5c <__libc_init_array>:
 8004e5c:	b570      	push	{r4, r5, r6, lr}
 8004e5e:	4d0d      	ldr	r5, [pc, #52]	; (8004e94 <__libc_init_array+0x38>)
 8004e60:	4c0d      	ldr	r4, [pc, #52]	; (8004e98 <__libc_init_array+0x3c>)
 8004e62:	1b64      	subs	r4, r4, r5
 8004e64:	10a4      	asrs	r4, r4, #2
 8004e66:	2600      	movs	r6, #0
 8004e68:	42a6      	cmp	r6, r4
 8004e6a:	d109      	bne.n	8004e80 <__libc_init_array+0x24>
 8004e6c:	4d0b      	ldr	r5, [pc, #44]	; (8004e9c <__libc_init_array+0x40>)
 8004e6e:	4c0c      	ldr	r4, [pc, #48]	; (8004ea0 <__libc_init_array+0x44>)
 8004e70:	f000 f818 	bl	8004ea4 <_init>
 8004e74:	1b64      	subs	r4, r4, r5
 8004e76:	10a4      	asrs	r4, r4, #2
 8004e78:	2600      	movs	r6, #0
 8004e7a:	42a6      	cmp	r6, r4
 8004e7c:	d105      	bne.n	8004e8a <__libc_init_array+0x2e>
 8004e7e:	bd70      	pop	{r4, r5, r6, pc}
 8004e80:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e84:	4798      	blx	r3
 8004e86:	3601      	adds	r6, #1
 8004e88:	e7ee      	b.n	8004e68 <__libc_init_array+0xc>
 8004e8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e8e:	4798      	blx	r3
 8004e90:	3601      	adds	r6, #1
 8004e92:	e7f2      	b.n	8004e7a <__libc_init_array+0x1e>
 8004e94:	08004f04 	.word	0x08004f04
 8004e98:	08004f04 	.word	0x08004f04
 8004e9c:	08004f04 	.word	0x08004f04
 8004ea0:	08004f08 	.word	0x08004f08

08004ea4 <_init>:
 8004ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ea6:	bf00      	nop
 8004ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eaa:	bc08      	pop	{r3}
 8004eac:	469e      	mov	lr, r3
 8004eae:	4770      	bx	lr

08004eb0 <_fini>:
 8004eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eb2:	bf00      	nop
 8004eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eb6:	bc08      	pop	{r3}
 8004eb8:	469e      	mov	lr, r3
 8004eba:	4770      	bx	lr
